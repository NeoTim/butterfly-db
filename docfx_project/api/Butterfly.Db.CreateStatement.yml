### YamlMime:ManagedReference
items:
- uid: Butterfly.Db.CreateStatement
  commentId: T:Butterfly.Db.CreateStatement
  id: CreateStatement
  parent: Butterfly.Db
  children:
  - Butterfly.Db.CreateStatement.#ctor(System.String)
  - Butterfly.Db.CreateStatement.ConvertMySqlType(System.String)
  - Butterfly.Db.CreateStatement.FIELD_REGEX
  - Butterfly.Db.CreateStatement.FieldDefs
  - Butterfly.Db.CreateStatement.INDEX_REGEX
  - Butterfly.Db.CreateStatement.Indexes
  - Butterfly.Db.CreateStatement.PARSE_TYPE
  - Butterfly.Db.CreateStatement.PRIMARY_KEY_REGEX
  - Butterfly.Db.CreateStatement.STATEMENT_REGEX
  - Butterfly.Db.CreateStatement.TableName
  langs:
  - csharp
  - vb
  name: CreateStatement
  nameWithType: CreateStatement
  fullName: Butterfly.Db.CreateStatement
  type: Class
  source:
    remote:
      path: Butterfly.Db/Statements/CreateStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: CreateStatement
    path: ../Butterfly.Db/Statements/CreateStatement.cs
    startLine: 13
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  summary: "\nInternal class used to parse CREATE statements\n"
  example: []
  syntax:
    content: 'public class CreateStatement : BaseStatement'
    content.vb: >-
      Public Class CreateStatement
          Inherits BaseStatement
  inheritance:
  - System.Object
  - Butterfly.Db.BaseStatement
  inheritedMembers:
  - Butterfly.Db.BaseStatement.IsSqlTableName
  - Butterfly.Db.BaseStatement.Sql
  - Butterfly.Db.BaseStatement.StatementFromRefs
  - Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  - Butterfly.Db.BaseStatement.fromTableNames
  - Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
  - Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  - Butterfly.Db.BaseStatement.EQUALS_REF_REGEX
  - Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Butterfly.Db.CreateStatement.STATEMENT_REGEX
  commentId: F:Butterfly.Db.CreateStatement.STATEMENT_REGEX
  id: STATEMENT_REGEX
  parent: Butterfly.Db.CreateStatement
  langs:
  - csharp
  - vb
  name: STATEMENT_REGEX
  nameWithType: CreateStatement.STATEMENT_REGEX
  fullName: Butterfly.Db.CreateStatement.STATEMENT_REGEX
  type: Field
  source:
    remote:
      path: Butterfly.Db/Statements/CreateStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: STATEMENT_REGEX
    path: ../Butterfly.Db/Statements/CreateStatement.cs
    startLine: 14
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: protected static readonly Regex STATEMENT_REGEX
    return:
      type: Regex
    content.vb: Protected Shared ReadOnly STATEMENT_REGEX As Regex
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Butterfly.Db.CreateStatement.FIELD_REGEX
  commentId: F:Butterfly.Db.CreateStatement.FIELD_REGEX
  id: FIELD_REGEX
  parent: Butterfly.Db.CreateStatement
  langs:
  - csharp
  - vb
  name: FIELD_REGEX
  nameWithType: CreateStatement.FIELD_REGEX
  fullName: Butterfly.Db.CreateStatement.FIELD_REGEX
  type: Field
  source:
    remote:
      path: Butterfly.Db/Statements/CreateStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: FIELD_REGEX
    path: ../Butterfly.Db/Statements/CreateStatement.cs
    startLine: 15
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: protected static readonly Regex FIELD_REGEX
    return:
      type: Regex
    content.vb: Protected Shared ReadOnly FIELD_REGEX As Regex
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Butterfly.Db.CreateStatement.PRIMARY_KEY_REGEX
  commentId: F:Butterfly.Db.CreateStatement.PRIMARY_KEY_REGEX
  id: PRIMARY_KEY_REGEX
  parent: Butterfly.Db.CreateStatement
  langs:
  - csharp
  - vb
  name: PRIMARY_KEY_REGEX
  nameWithType: CreateStatement.PRIMARY_KEY_REGEX
  fullName: Butterfly.Db.CreateStatement.PRIMARY_KEY_REGEX
  type: Field
  source:
    remote:
      path: Butterfly.Db/Statements/CreateStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: PRIMARY_KEY_REGEX
    path: ../Butterfly.Db/Statements/CreateStatement.cs
    startLine: 16
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: protected static readonly Regex PRIMARY_KEY_REGEX
    return:
      type: Regex
    content.vb: Protected Shared ReadOnly PRIMARY_KEY_REGEX As Regex
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Butterfly.Db.CreateStatement.INDEX_REGEX
  commentId: F:Butterfly.Db.CreateStatement.INDEX_REGEX
  id: INDEX_REGEX
  parent: Butterfly.Db.CreateStatement
  langs:
  - csharp
  - vb
  name: INDEX_REGEX
  nameWithType: CreateStatement.INDEX_REGEX
  fullName: Butterfly.Db.CreateStatement.INDEX_REGEX
  type: Field
  source:
    remote:
      path: Butterfly.Db/Statements/CreateStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: INDEX_REGEX
    path: ../Butterfly.Db/Statements/CreateStatement.cs
    startLine: 17
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: protected static readonly Regex INDEX_REGEX
    return:
      type: Regex
    content.vb: Protected Shared ReadOnly INDEX_REGEX As Regex
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Butterfly.Db.CreateStatement.#ctor(System.String)
  commentId: M:Butterfly.Db.CreateStatement.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Butterfly.Db.CreateStatement
  langs:
  - csharp
  - vb
  name: CreateStatement(String)
  nameWithType: CreateStatement.CreateStatement(String)
  fullName: Butterfly.Db.CreateStatement.CreateStatement(System.String)
  type: Constructor
  source:
    remote:
      path: Butterfly.Db/Statements/CreateStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: .ctor
    path: ../Butterfly.Db/Statements/CreateStatement.cs
    startLine: 19
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public CreateStatement(string sql)
    parameters:
    - id: sql
      type: System.String
    content.vb: Public Sub New(sql As String)
  overload: Butterfly.Db.CreateStatement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Db.CreateStatement.TableName
  commentId: P:Butterfly.Db.CreateStatement.TableName
  id: TableName
  parent: Butterfly.Db.CreateStatement
  langs:
  - csharp
  - vb
  name: TableName
  nameWithType: CreateStatement.TableName
  fullName: Butterfly.Db.CreateStatement.TableName
  type: Property
  source:
    remote:
      path: Butterfly.Db/Statements/CreateStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: TableName
    path: ../Butterfly.Db/Statements/CreateStatement.cs
    startLine: 69
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public string TableName { get; protected set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property TableName As String
  overload: Butterfly.Db.CreateStatement.TableName*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Butterfly.Db.CreateStatement.FieldDefs
  commentId: P:Butterfly.Db.CreateStatement.FieldDefs
  id: FieldDefs
  parent: Butterfly.Db.CreateStatement
  langs:
  - csharp
  - vb
  name: FieldDefs
  nameWithType: CreateStatement.FieldDefs
  fullName: Butterfly.Db.CreateStatement.FieldDefs
  type: Property
  source:
    remote:
      path: Butterfly.Db/Statements/CreateStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: FieldDefs
    path: ../Butterfly.Db/Statements/CreateStatement.cs
    startLine: 74
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public TableFieldDef[] FieldDefs { get; protected set; }
    parameters: []
    return:
      type: Butterfly.Db.TableFieldDef[]
    content.vb: Public Property FieldDefs As TableFieldDef()
  overload: Butterfly.Db.CreateStatement.FieldDefs*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Butterfly.Db.CreateStatement.Indexes
  commentId: P:Butterfly.Db.CreateStatement.Indexes
  id: Indexes
  parent: Butterfly.Db.CreateStatement
  langs:
  - csharp
  - vb
  name: Indexes
  nameWithType: CreateStatement.Indexes
  fullName: Butterfly.Db.CreateStatement.Indexes
  type: Property
  source:
    remote:
      path: Butterfly.Db/Statements/CreateStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: Indexes
    path: ../Butterfly.Db/Statements/CreateStatement.cs
    startLine: 79
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public TableIndex[] Indexes { get; protected set; }
    parameters: []
    return:
      type: Butterfly.Db.TableIndex[]
    content.vb: Public Property Indexes As TableIndex()
  overload: Butterfly.Db.CreateStatement.Indexes*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Butterfly.Db.CreateStatement.PARSE_TYPE
  commentId: F:Butterfly.Db.CreateStatement.PARSE_TYPE
  id: PARSE_TYPE
  parent: Butterfly.Db.CreateStatement
  langs:
  - csharp
  - vb
  name: PARSE_TYPE
  nameWithType: CreateStatement.PARSE_TYPE
  fullName: Butterfly.Db.CreateStatement.PARSE_TYPE
  type: Field
  source:
    remote:
      path: Butterfly.Db/Statements/CreateStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: PARSE_TYPE
    path: ../Butterfly.Db/Statements/CreateStatement.cs
    startLine: 84
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: protected static readonly Regex PARSE_TYPE
    return:
      type: Regex
    content.vb: Protected Shared ReadOnly PARSE_TYPE As Regex
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Butterfly.Db.CreateStatement.ConvertMySqlType(System.String)
  commentId: M:Butterfly.Db.CreateStatement.ConvertMySqlType(System.String)
  id: ConvertMySqlType(System.String)
  parent: Butterfly.Db.CreateStatement
  langs:
  - csharp
  - vb
  name: ConvertMySqlType(String)
  nameWithType: CreateStatement.ConvertMySqlType(String)
  fullName: Butterfly.Db.CreateStatement.ConvertMySqlType(System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Statements/CreateStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: ConvertMySqlType
    path: ../Butterfly.Db/Statements/CreateStatement.cs
    startLine: 86
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public static (Type, int) ConvertMySqlType(string text)
    parameters:
    - id: text
      type: System.String
    return:
      type: System.ValueTuple{Type,System.Int32}
    content.vb: Public Shared Function ConvertMySqlType(text As String) As(Type, Integer)
  overload: Butterfly.Db.CreateStatement.ConvertMySqlType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Butterfly.Db
  commentId: N:Butterfly.Db
  name: Butterfly.Db
  nameWithType: Butterfly.Db
  fullName: Butterfly.Db
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Butterfly.Db.BaseStatement
  commentId: T:Butterfly.Db.BaseStatement
  parent: Butterfly.Db
  name: BaseStatement
  nameWithType: BaseStatement
  fullName: Butterfly.Db.BaseStatement
- uid: Butterfly.Db.BaseStatement.IsSqlTableName
  commentId: P:Butterfly.Db.BaseStatement.IsSqlTableName
  parent: Butterfly.Db.BaseStatement
  name: IsSqlTableName
  nameWithType: BaseStatement.IsSqlTableName
  fullName: Butterfly.Db.BaseStatement.IsSqlTableName
- uid: Butterfly.Db.BaseStatement.Sql
  commentId: P:Butterfly.Db.BaseStatement.Sql
  parent: Butterfly.Db.BaseStatement
  name: Sql
  nameWithType: BaseStatement.Sql
  fullName: Butterfly.Db.BaseStatement.Sql
- uid: Butterfly.Db.BaseStatement.StatementFromRefs
  commentId: P:Butterfly.Db.BaseStatement.StatementFromRefs
  parent: Butterfly.Db.BaseStatement
  name: StatementFromRefs
  nameWithType: BaseStatement.StatementFromRefs
  fullName: Butterfly.Db.BaseStatement.StatementFromRefs
- uid: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  commentId: M:Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: FindStatementFromRefByTableAlias(String)
  nameWithType: BaseStatement.FindStatementFromRefByTableAlias(String)
  fullName: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
    name: FindStatementFromRefByTableAlias
    nameWithType: BaseStatement.FindStatementFromRefByTableAlias
    fullName: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
    name: FindStatementFromRefByTableAlias
    nameWithType: BaseStatement.FindStatementFromRefByTableAlias
    fullName: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseStatement.fromTableNames
  commentId: F:Butterfly.Db.BaseStatement.fromTableNames
  parent: Butterfly.Db.BaseStatement
  name: fromTableNames
  nameWithType: BaseStatement.fromTableNames
  fullName: Butterfly.Db.BaseStatement.fromTableNames
- uid: Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
  commentId: M:Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: HasTableInFrom(String)
  nameWithType: BaseStatement.HasTableInFrom(String)
  fullName: Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
    name: HasTableInFrom
    nameWithType: BaseStatement.HasTableInFrom
    fullName: Butterfly.Db.BaseStatement.HasTableInFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
    name: HasTableInFrom
    nameWithType: BaseStatement.HasTableInFrom
    fullName: Butterfly.Db.BaseStatement.HasTableInFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary<String, Object>)
  nameWithType: BaseStatement.ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary<String, Object>)
  fullName: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  nameWithType.vb: BaseStatement.ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary(Of String, Object))
  fullName.vb: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary(Of String, Object))
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
    name: ConfirmAllParamsUsed
    nameWithType: BaseStatement.ConfirmAllParamsUsed
    fullName: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
    name: ConfirmAllParamsUsed
    nameWithType: BaseStatement.ConfirmAllParamsUsed
    fullName: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  commentId: M:Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: ConvertParamsToDict(Object, Boolean)
  nameWithType: BaseStatement.ConvertParamsToDict(Object, Boolean)
  fullName: Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object, System.Boolean)
  nameWithType.vb: BaseStatement.ConvertParamsToDict(, Boolean)
  fullName.vb: Butterfly.Db.BaseStatement.ConvertParamsToDict(, System.Boolean)
  name.vb: ConvertParamsToDict(, Boolean)
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
    name: ConvertParamsToDict
    nameWithType: BaseStatement.ConvertParamsToDict
    fullName: Butterfly.Db.BaseStatement.ConvertParamsToDict
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
    name: ConvertParamsToDict
    nameWithType: BaseStatement.ConvertParamsToDict
    fullName: Butterfly.Db.BaseStatement.ConvertParamsToDict
  - name: (
    nameWithType: (
    fullName: (
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseStatement.EQUALS_REF_REGEX
  commentId: F:Butterfly.Db.BaseStatement.EQUALS_REF_REGEX
  parent: Butterfly.Db.BaseStatement
  name: EQUALS_REF_REGEX
  nameWithType: BaseStatement.EQUALS_REF_REGEX
  fullName: Butterfly.Db.BaseStatement.EQUALS_REF_REGEX
- uid: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  commentId: M:Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<String, Object>, StatementEqualsRef[])
  nameWithType: BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<String, Object>, StatementEqualsRef[])
  fullName: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<System.String, System.Object>, Butterfly.Db.StatementEqualsRef[])
  nameWithType.vb: BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of String, Object), StatementEqualsRef())
  fullName.vb: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of System.String, System.Object), Butterfly.Db.StatementEqualsRef())
  name.vb: RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of String, Object), StatementEqualsRef())
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
    name: RemapStatementParamsToFieldValues
    nameWithType: BaseStatement.RemapStatementParamsToFieldValues
    fullName: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Db.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Db.StatementEqualsRef
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
    name: RemapStatementParamsToFieldValues
    nameWithType: BaseStatement.RemapStatementParamsToFieldValues
    fullName: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Db.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Db.StatementEqualsRef
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Regex
  isExternal: true
  name: Regex
  nameWithType: Regex
  fullName: Regex
- uid: Butterfly.Db.CreateStatement.#ctor*
  commentId: Overload:Butterfly.Db.CreateStatement.#ctor
  name: CreateStatement
  nameWithType: CreateStatement.CreateStatement
  fullName: Butterfly.Db.CreateStatement.CreateStatement
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Butterfly.Db.CreateStatement.TableName*
  commentId: Overload:Butterfly.Db.CreateStatement.TableName
  name: TableName
  nameWithType: CreateStatement.TableName
  fullName: Butterfly.Db.CreateStatement.TableName
- uid: Butterfly.Db.CreateStatement.FieldDefs*
  commentId: Overload:Butterfly.Db.CreateStatement.FieldDefs
  name: FieldDefs
  nameWithType: CreateStatement.FieldDefs
  fullName: Butterfly.Db.CreateStatement.FieldDefs
- uid: Butterfly.Db.TableFieldDef[]
  isExternal: true
  name: TableFieldDef[]
  nameWithType: TableFieldDef[]
  fullName: Butterfly.Db.TableFieldDef[]
  nameWithType.vb: TableFieldDef()
  fullName.vb: Butterfly.Db.TableFieldDef()
  name.vb: TableFieldDef()
  spec.csharp:
  - uid: Butterfly.Db.TableFieldDef
    name: TableFieldDef
    nameWithType: TableFieldDef
    fullName: Butterfly.Db.TableFieldDef
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Butterfly.Db.TableFieldDef
    name: TableFieldDef
    nameWithType: TableFieldDef
    fullName: Butterfly.Db.TableFieldDef
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Butterfly.Db.CreateStatement.Indexes*
  commentId: Overload:Butterfly.Db.CreateStatement.Indexes
  name: Indexes
  nameWithType: CreateStatement.Indexes
  fullName: Butterfly.Db.CreateStatement.Indexes
- uid: Butterfly.Db.TableIndex[]
  isExternal: true
  name: TableIndex[]
  nameWithType: TableIndex[]
  fullName: Butterfly.Db.TableIndex[]
  nameWithType.vb: TableIndex()
  fullName.vb: Butterfly.Db.TableIndex()
  name.vb: TableIndex()
  spec.csharp:
  - uid: Butterfly.Db.TableIndex
    name: TableIndex
    nameWithType: TableIndex
    fullName: Butterfly.Db.TableIndex
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Butterfly.Db.TableIndex
    name: TableIndex
    nameWithType: TableIndex
    fullName: Butterfly.Db.TableIndex
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Butterfly.Db.CreateStatement.ConvertMySqlType*
  commentId: Overload:Butterfly.Db.CreateStatement.ConvertMySqlType
  name: ConvertMySqlType
  nameWithType: CreateStatement.ConvertMySqlType
  fullName: Butterfly.Db.CreateStatement.ConvertMySqlType
- uid: System.ValueTuple{Type,System.Int32}
  commentId: T:System.ValueTuple{Type,System.Int32}
  parent: System
  isExternal: true
  name: ValueTuple<Type, Int32>
  nameWithType: ValueTuple<Type, Int32>
  fullName: System.ValueTuple<Type, System.Int32>
  nameWithType.vb: ValueTuple(Of Type, Int32)
  fullName.vb: System.ValueTuple(Of Type, System.Int32)
  name.vb: ValueTuple(Of Type, Int32)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Type
    name: Type
    nameWithType: Type
    fullName: Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
shouldSkipMarkup: true
