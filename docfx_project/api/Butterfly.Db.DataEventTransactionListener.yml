### YamlMime:ManagedReference
items:
- uid: Butterfly.Db.DataEventTransactionListener
  commentId: T:Butterfly.Db.DataEventTransactionListener
  id: DataEventTransactionListener
  parent: Butterfly.Db
  children:
  - Butterfly.Db.DataEventTransactionListener.#ctor(Action{Butterfly.Db.Event.DataEventTransaction})
  - Butterfly.Db.DataEventTransactionListener.#ctor(Func{Butterfly.Db.Event.DataEventTransaction,Task})
  - Butterfly.Db.DataEventTransactionListener.listener
  - Butterfly.Db.DataEventTransactionListener.listenerAsync
  langs:
  - csharp
  - vb
  name: DataEventTransactionListener
  nameWithType: DataEventTransactionListener
  fullName: Butterfly.Db.DataEventTransactionListener
  type: Class
  source:
    remote:
      path: Butterfly.Db/DataEventTransactionListener.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: DataEventTransactionListener
    path: ../Butterfly.Db/DataEventTransactionListener.cs
    startLine: 13
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  summary: "\nInternal class used to store references to data event transaction listeners\n"
  example: []
  syntax:
    content: 'public class DataEventTransactionListener : object'
    content.vb: >-
      Public Class DataEventTransactionListener
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Butterfly.Db.DataEventTransactionListener.listener
  commentId: F:Butterfly.Db.DataEventTransactionListener.listener
  id: listener
  parent: Butterfly.Db.DataEventTransactionListener
  langs:
  - csharp
  - vb
  name: listener
  nameWithType: DataEventTransactionListener.listener
  fullName: Butterfly.Db.DataEventTransactionListener.listener
  type: Field
  source:
    remote:
      path: Butterfly.Db/DataEventTransactionListener.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: listener
    path: ../Butterfly.Db/DataEventTransactionListener.cs
    startLine: 14
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public readonly Action<DataEventTransaction> listener
    return:
      type: Action{Butterfly.Db.Event.DataEventTransaction}
    content.vb: Public ReadOnly listener As Action(Of DataEventTransaction)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Butterfly.Db.DataEventTransactionListener.listenerAsync
  commentId: F:Butterfly.Db.DataEventTransactionListener.listenerAsync
  id: listenerAsync
  parent: Butterfly.Db.DataEventTransactionListener
  langs:
  - csharp
  - vb
  name: listenerAsync
  nameWithType: DataEventTransactionListener.listenerAsync
  fullName: Butterfly.Db.DataEventTransactionListener.listenerAsync
  type: Field
  source:
    remote:
      path: Butterfly.Db/DataEventTransactionListener.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: listenerAsync
    path: ../Butterfly.Db/DataEventTransactionListener.cs
    startLine: 15
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public readonly Func<DataEventTransaction, Task> listenerAsync
    return:
      type: Func{Butterfly.Db.Event.DataEventTransaction,Task}
    content.vb: Public ReadOnly listenerAsync As Func(Of DataEventTransaction, Task)
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Butterfly.Db.DataEventTransactionListener.#ctor(Action{Butterfly.Db.Event.DataEventTransaction})
  commentId: M:Butterfly.Db.DataEventTransactionListener.#ctor(Action{Butterfly.Db.Event.DataEventTransaction})
  id: '#ctor(Action{Butterfly.Db.Event.DataEventTransaction})'
  parent: Butterfly.Db.DataEventTransactionListener
  langs:
  - csharp
  - vb
  name: DataEventTransactionListener(Action<DataEventTransaction>)
  nameWithType: DataEventTransactionListener.DataEventTransactionListener(Action<DataEventTransaction>)
  fullName: Butterfly.Db.DataEventTransactionListener.DataEventTransactionListener(Action<Butterfly.Db.Event.DataEventTransaction>)
  type: Constructor
  source:
    remote:
      path: Butterfly.Db/DataEventTransactionListener.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: .ctor
    path: ../Butterfly.Db/DataEventTransactionListener.cs
    startLine: 17
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public DataEventTransactionListener(Action<DataEventTransaction> listener)
    parameters:
    - id: listener
      type: Action{Butterfly.Db.Event.DataEventTransaction}
    content.vb: Public Sub New(listener As Action(Of DataEventTransaction))
  overload: Butterfly.Db.DataEventTransactionListener.#ctor*
  nameWithType.vb: DataEventTransactionListener.DataEventTransactionListener(Action(Of DataEventTransaction))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Butterfly.Db.DataEventTransactionListener.DataEventTransactionListener(Action(Of Butterfly.Db.Event.DataEventTransaction))
  name.vb: DataEventTransactionListener(Action(Of DataEventTransaction))
- uid: Butterfly.Db.DataEventTransactionListener.#ctor(Func{Butterfly.Db.Event.DataEventTransaction,Task})
  commentId: M:Butterfly.Db.DataEventTransactionListener.#ctor(Func{Butterfly.Db.Event.DataEventTransaction,Task})
  id: '#ctor(Func{Butterfly.Db.Event.DataEventTransaction,Task})'
  parent: Butterfly.Db.DataEventTransactionListener
  langs:
  - csharp
  - vb
  name: DataEventTransactionListener(Func<DataEventTransaction, Task>)
  nameWithType: DataEventTransactionListener.DataEventTransactionListener(Func<DataEventTransaction, Task>)
  fullName: Butterfly.Db.DataEventTransactionListener.DataEventTransactionListener(Func<Butterfly.Db.Event.DataEventTransaction, Task>)
  type: Constructor
  source:
    remote:
      path: Butterfly.Db/DataEventTransactionListener.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: .ctor
    path: ../Butterfly.Db/DataEventTransactionListener.cs
    startLine: 22
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public DataEventTransactionListener(Func<DataEventTransaction, Task> listener)
    parameters:
    - id: listener
      type: Func{Butterfly.Db.Event.DataEventTransaction,Task}
    content.vb: Public Sub New(listener As Func(Of DataEventTransaction, Task))
  overload: Butterfly.Db.DataEventTransactionListener.#ctor*
  nameWithType.vb: DataEventTransactionListener.DataEventTransactionListener(Func(Of DataEventTransaction, Task))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Butterfly.Db.DataEventTransactionListener.DataEventTransactionListener(Func(Of Butterfly.Db.Event.DataEventTransaction, Task))
  name.vb: DataEventTransactionListener(Func(Of DataEventTransaction, Task))
references:
- uid: Butterfly.Db
  commentId: N:Butterfly.Db
  name: Butterfly.Db
  nameWithType: Butterfly.Db
  fullName: Butterfly.Db
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Action{Butterfly.Db.Event.DataEventTransaction}
  commentId: '!:Action{Butterfly.Db.Event.DataEventTransaction}'
  definition: Action`1
  name: Action<DataEventTransaction>
  nameWithType: Action<DataEventTransaction>
  fullName: Action<Butterfly.Db.Event.DataEventTransaction>
  nameWithType.vb: Action(Of DataEventTransaction)
  fullName.vb: Action(Of Butterfly.Db.Event.DataEventTransaction)
  name.vb: Action(Of DataEventTransaction)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{Butterfly.Db.Event.DataEventTransaction,Task}
  commentId: '!:Func{Butterfly.Db.Event.DataEventTransaction,Task}'
  definition: Func`2
  name: Func<DataEventTransaction, Task>
  nameWithType: Func<DataEventTransaction, Task>
  fullName: Func<Butterfly.Db.Event.DataEventTransaction, Task>
  nameWithType.vb: Func(Of DataEventTransaction, Task)
  fullName.vb: Func(Of Butterfly.Db.Event.DataEventTransaction, Task)
  name.vb: Func(Of DataEventTransaction, Task)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.DataEventTransactionListener.#ctor*
  commentId: Overload:Butterfly.Db.DataEventTransactionListener.#ctor
  name: DataEventTransactionListener
  nameWithType: DataEventTransactionListener.DataEventTransactionListener
  fullName: Butterfly.Db.DataEventTransactionListener.DataEventTransactionListener
shouldSkipMarkup: true
