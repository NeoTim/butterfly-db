### YamlMime:ManagedReference
items:
- uid: Butterfly.Db.InsertStatement
  commentId: T:Butterfly.Db.InsertStatement
  id: InsertStatement
  parent: Butterfly.Db
  children:
  - Butterfly.Db.InsertStatement.#ctor(Butterfly.Db.IDatabase,System.String)
  - Butterfly.Db.InsertStatement.fromClause
  - Butterfly.Db.InsertStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})
  - Butterfly.Db.InsertStatement.GetInsertRefs(System.Collections.Generic.Dictionary{System.String,System.Object})
  - Butterfly.Db.InsertStatement.GetNamesAndValues(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})
  - Butterfly.Db.InsertStatement.namesClause
  - Butterfly.Db.InsertStatement.ParseNamesClause(System.String)
  - Butterfly.Db.InsertStatement.ParseValuesClause(System.String)
  - Butterfly.Db.InsertStatement.STATEMENT_REGEX
  - Butterfly.Db.InsertStatement.valuesClause
  langs:
  - csharp
  - vb
  name: InsertStatement
  nameWithType: InsertStatement
  fullName: Butterfly.Db.InsertStatement
  type: Class
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Db/Butterfly.Db/Statements/InsertStatement.cs
    id: InsertStatement
    path: ../Butterfly.Db/Statements/InsertStatement.cs
    startLine: 17
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  summary: "\nInternal class used to parse INSERT statements\n"
  example: []
  syntax:
    content: 'public class InsertStatement : BaseStatement'
    content.vb: >-
      Public Class InsertStatement
          Inherits BaseStatement
  inheritance:
  - System.Object
  - Butterfly.Db.BaseStatement
  inheritedMembers:
  - Butterfly.Db.BaseStatement.IsSqlTableName
  - Butterfly.Db.BaseStatement.Sql
  - Butterfly.Db.BaseStatement.StatementFromRefs
  - Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  - Butterfly.Db.BaseStatement.fromTableNames
  - Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
  - Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  - Butterfly.Db.BaseStatement.EQUALS_REF_REGEX
  - Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Butterfly.Db.InsertStatement.STATEMENT_REGEX
  commentId: F:Butterfly.Db.InsertStatement.STATEMENT_REGEX
  id: STATEMENT_REGEX
  parent: Butterfly.Db.InsertStatement
  langs:
  - csharp
  - vb
  name: STATEMENT_REGEX
  nameWithType: InsertStatement.STATEMENT_REGEX
  fullName: Butterfly.Db.InsertStatement.STATEMENT_REGEX
  type: Field
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Db/Butterfly.Db/Statements/InsertStatement.cs
    id: STATEMENT_REGEX
    path: ../Butterfly.Db/Statements/InsertStatement.cs
    startLine: 22
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: protected static readonly Regex STATEMENT_REGEX
    return:
      type: Regex
    content.vb: Protected Shared ReadOnly STATEMENT_REGEX As Regex
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Butterfly.Db.InsertStatement.fromClause
  commentId: F:Butterfly.Db.InsertStatement.fromClause
  id: fromClause
  parent: Butterfly.Db.InsertStatement
  langs:
  - csharp
  - vb
  name: fromClause
  nameWithType: InsertStatement.fromClause
  fullName: Butterfly.Db.InsertStatement.fromClause
  type: Field
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Db/Butterfly.Db/Statements/InsertStatement.cs
    id: fromClause
    path: ../Butterfly.Db/Statements/InsertStatement.cs
    startLine: 24
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: protected readonly string fromClause
    return:
      type: System.String
    content.vb: Protected ReadOnly fromClause As String
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Db.InsertStatement.namesClause
  commentId: F:Butterfly.Db.InsertStatement.namesClause
  id: namesClause
  parent: Butterfly.Db.InsertStatement
  langs:
  - csharp
  - vb
  name: namesClause
  nameWithType: InsertStatement.namesClause
  fullName: Butterfly.Db.InsertStatement.namesClause
  type: Field
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Db/Butterfly.Db/Statements/InsertStatement.cs
    id: namesClause
    path: ../Butterfly.Db/Statements/InsertStatement.cs
    startLine: 25
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: protected readonly string namesClause
    return:
      type: System.String
    content.vb: Protected ReadOnly namesClause As String
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Db.InsertStatement.valuesClause
  commentId: F:Butterfly.Db.InsertStatement.valuesClause
  id: valuesClause
  parent: Butterfly.Db.InsertStatement
  langs:
  - csharp
  - vb
  name: valuesClause
  nameWithType: InsertStatement.valuesClause
  fullName: Butterfly.Db.InsertStatement.valuesClause
  type: Field
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Db/Butterfly.Db/Statements/InsertStatement.cs
    id: valuesClause
    path: ../Butterfly.Db/Statements/InsertStatement.cs
    startLine: 26
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: protected readonly string valuesClause
    return:
      type: System.String
    content.vb: Protected ReadOnly valuesClause As String
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Db.InsertStatement.#ctor(Butterfly.Db.IDatabase,System.String)
  commentId: M:Butterfly.Db.InsertStatement.#ctor(Butterfly.Db.IDatabase,System.String)
  id: '#ctor(Butterfly.Db.IDatabase,System.String)'
  parent: Butterfly.Db.InsertStatement
  langs:
  - csharp
  - vb
  name: InsertStatement(IDatabase, String)
  nameWithType: InsertStatement.InsertStatement(IDatabase, String)
  fullName: Butterfly.Db.InsertStatement.InsertStatement(Butterfly.Db.IDatabase, System.String)
  type: Constructor
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Db/Butterfly.Db/Statements/InsertStatement.cs
    id: .ctor
    path: ../Butterfly.Db/Statements/InsertStatement.cs
    startLine: 33
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  summary: "\n\n"
  example: []
  syntax:
    content: public InsertStatement(IDatabase database, string sql)
    parameters:
    - id: database
      type: Butterfly.Db.IDatabase
      description: ''
    - id: sql
      type: System.String
      description: Can be a table name or full SQL. Full SQL can use @@names and @@values tokens to retrieve values from the record parameter.
    content.vb: Public Sub New(database As IDatabase, sql As String)
  overload: Butterfly.Db.InsertStatement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Db.InsertStatement.ParseNamesClause(System.String)
  commentId: M:Butterfly.Db.InsertStatement.ParseNamesClause(System.String)
  id: ParseNamesClause(System.String)
  parent: Butterfly.Db.InsertStatement
  langs:
  - csharp
  - vb
  name: ParseNamesClause(String)
  nameWithType: InsertStatement.ParseNamesClause(String)
  fullName: Butterfly.Db.InsertStatement.ParseNamesClause(System.String)
  type: Method
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Db/Butterfly.Db/Statements/InsertStatement.cs
    id: ParseNamesClause
    path: ../Butterfly.Db/Statements/InsertStatement.cs
    startLine: 57
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public static List<string> ParseNamesClause(string namesClause)
    parameters:
    - id: namesClause
      type: System.String
    return:
      type: List{System.String}
    content.vb: Public Shared Function ParseNamesClause(namesClause As String) As List(Of String)
  overload: Butterfly.Db.InsertStatement.ParseNamesClause*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Butterfly.Db.InsertStatement.ParseValuesClause(System.String)
  commentId: M:Butterfly.Db.InsertStatement.ParseValuesClause(System.String)
  id: ParseValuesClause(System.String)
  parent: Butterfly.Db.InsertStatement
  langs:
  - csharp
  - vb
  name: ParseValuesClause(String)
  nameWithType: InsertStatement.ParseValuesClause(String)
  fullName: Butterfly.Db.InsertStatement.ParseValuesClause(System.String)
  type: Method
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Db/Butterfly.Db/Statements/InsertStatement.cs
    id: ParseValuesClause
    path: ../Butterfly.Db/Statements/InsertStatement.cs
    startLine: 61
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public static List<string> ParseValuesClause(string valuesClause)
    parameters:
    - id: valuesClause
      type: System.String
    return:
      type: List{System.String}
    content.vb: Public Shared Function ParseValuesClause(valuesClause As String) As List(Of String)
  overload: Butterfly.Db.InsertStatement.ParseValuesClause*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Butterfly.Db.InsertStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Butterfly.Db.InsertStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})
  id: GetExecutableSqlAndParams(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Butterfly.Db.InsertStatement
  langs:
  - csharp
  - vb
  name: GetExecutableSqlAndParams(System.Collections.Generic.Dictionary<String, Object>, System.Collections.Generic.Dictionary<String, Object>)
  nameWithType: InsertStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary<String, Object>, System.Collections.Generic.Dictionary<String, Object>)
  fullName: Butterfly.Db.InsertStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary<System.String, System.Object>, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Db/Butterfly.Db/Statements/InsertStatement.cs
    id: GetExecutableSqlAndParams
    path: ../Butterfly.Db/Statements/InsertStatement.cs
    startLine: 65
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public (string, System.Collections.Generic.Dictionary<string, object>) GetExecutableSqlAndParams(System.Collections.Generic.Dictionary<string, object> statementParams, System.Collections.Generic.Dictionary<string, object> defaultValues)
    parameters:
    - id: statementParams
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: defaultValues
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    return:
      type: System.ValueTuple{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
    content.vb: Public Function GetExecutableSqlAndParams(statementParams As System.Collections.Generic.Dictionary(Of String, Object), defaultValues As System.Collections.Generic.Dictionary(Of String, Object)) As(String, System.Collections.Generic.Dictionary(Of String, Object))
  overload: Butterfly.Db.InsertStatement.GetExecutableSqlAndParams*
  nameWithType.vb: InsertStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary(Of String, Object), System.Collections.Generic.Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Butterfly.Db.InsertStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary(Of System.String, System.Object), System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: GetExecutableSqlAndParams(System.Collections.Generic.Dictionary(Of String, Object), System.Collections.Generic.Dictionary(Of String, Object))
- uid: Butterfly.Db.InsertStatement.GetInsertRefs(System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Butterfly.Db.InsertStatement.GetInsertRefs(System.Collections.Generic.Dictionary{System.String,System.Object})
  id: GetInsertRefs(System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Butterfly.Db.InsertStatement
  langs:
  - csharp
  - vb
  name: GetInsertRefs(System.Collections.Generic.Dictionary<String, Object>)
  nameWithType: InsertStatement.GetInsertRefs(System.Collections.Generic.Dictionary<String, Object>)
  fullName: Butterfly.Db.InsertStatement.GetInsertRefs(System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Db/Butterfly.Db/Statements/InsertStatement.cs
    id: GetInsertRefs
    path: ../Butterfly.Db/Statements/InsertStatement.cs
    startLine: 81
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public StatementEqualsRef[] GetInsertRefs(System.Collections.Generic.Dictionary<string, object> executableParams)
    parameters:
    - id: executableParams
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    return:
      type: Butterfly.Db.StatementEqualsRef[]
    content.vb: Public Function GetInsertRefs(executableParams As System.Collections.Generic.Dictionary(Of String, Object)) As StatementEqualsRef()
  overload: Butterfly.Db.InsertStatement.GetInsertRefs*
  nameWithType.vb: InsertStatement.GetInsertRefs(System.Collections.Generic.Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Butterfly.Db.InsertStatement.GetInsertRefs(System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: GetInsertRefs(System.Collections.Generic.Dictionary(Of String, Object))
- uid: Butterfly.Db.InsertStatement.GetNamesAndValues(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Butterfly.Db.InsertStatement.GetNamesAndValues(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})
  id: GetNamesAndValues(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Butterfly.Db.InsertStatement
  langs:
  - csharp
  - vb
  name: GetNamesAndValues(System.Collections.Generic.Dictionary<String, Object>, System.Collections.Generic.Dictionary<String, Object>)
  nameWithType: InsertStatement.GetNamesAndValues(System.Collections.Generic.Dictionary<String, Object>, System.Collections.Generic.Dictionary<String, Object>)
  fullName: Butterfly.Db.InsertStatement.GetNamesAndValues(System.Collections.Generic.Dictionary<System.String, System.Object>, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: C:/Users/kent1/Documents/Visual Studio 2019/Projects/Butterfly.Db/Butterfly.Db/Statements/InsertStatement.cs
    id: GetNamesAndValues
    path: ../Butterfly.Db/Statements/InsertStatement.cs
    startLine: 91
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: protected (List<string>, List<string>) GetNamesAndValues(System.Collections.Generic.Dictionary<string, object> executableParams, System.Collections.Generic.Dictionary<string, object> defaultValues = null)
    parameters:
    - id: executableParams
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: defaultValues
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    return:
      type: System.ValueTuple{List{System.String},List{System.String}}
    content.vb: Protected Function GetNamesAndValues(executableParams As System.Collections.Generic.Dictionary(Of String, Object), defaultValues As System.Collections.Generic.Dictionary(Of String, Object) = Nothing) As(List(Of String), List(Of String))
  overload: Butterfly.Db.InsertStatement.GetNamesAndValues*
  nameWithType.vb: InsertStatement.GetNamesAndValues(System.Collections.Generic.Dictionary(Of String, Object), System.Collections.Generic.Dictionary(Of String, Object))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Butterfly.Db.InsertStatement.GetNamesAndValues(System.Collections.Generic.Dictionary(Of System.String, System.Object), System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: GetNamesAndValues(System.Collections.Generic.Dictionary(Of String, Object), System.Collections.Generic.Dictionary(Of String, Object))
references:
- uid: Butterfly.Db
  commentId: N:Butterfly.Db
  name: Butterfly.Db
  nameWithType: Butterfly.Db
  fullName: Butterfly.Db
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Butterfly.Db.BaseStatement
  commentId: T:Butterfly.Db.BaseStatement
  parent: Butterfly.Db
  name: BaseStatement
  nameWithType: BaseStatement
  fullName: Butterfly.Db.BaseStatement
- uid: Butterfly.Db.BaseStatement.IsSqlTableName
  commentId: P:Butterfly.Db.BaseStatement.IsSqlTableName
  parent: Butterfly.Db.BaseStatement
  name: IsSqlTableName
  nameWithType: BaseStatement.IsSqlTableName
  fullName: Butterfly.Db.BaseStatement.IsSqlTableName
- uid: Butterfly.Db.BaseStatement.Sql
  commentId: P:Butterfly.Db.BaseStatement.Sql
  parent: Butterfly.Db.BaseStatement
  name: Sql
  nameWithType: BaseStatement.Sql
  fullName: Butterfly.Db.BaseStatement.Sql
- uid: Butterfly.Db.BaseStatement.StatementFromRefs
  commentId: P:Butterfly.Db.BaseStatement.StatementFromRefs
  parent: Butterfly.Db.BaseStatement
  name: StatementFromRefs
  nameWithType: BaseStatement.StatementFromRefs
  fullName: Butterfly.Db.BaseStatement.StatementFromRefs
- uid: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  commentId: M:Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: FindStatementFromRefByTableAlias(String)
  nameWithType: BaseStatement.FindStatementFromRefByTableAlias(String)
  fullName: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
    name: FindStatementFromRefByTableAlias
    nameWithType: BaseStatement.FindStatementFromRefByTableAlias
    fullName: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
    name: FindStatementFromRefByTableAlias
    nameWithType: BaseStatement.FindStatementFromRefByTableAlias
    fullName: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseStatement.fromTableNames
  commentId: F:Butterfly.Db.BaseStatement.fromTableNames
  parent: Butterfly.Db.BaseStatement
  name: fromTableNames
  nameWithType: BaseStatement.fromTableNames
  fullName: Butterfly.Db.BaseStatement.fromTableNames
- uid: Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
  commentId: M:Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: HasTableInFrom(String)
  nameWithType: BaseStatement.HasTableInFrom(String)
  fullName: Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
    name: HasTableInFrom
    nameWithType: BaseStatement.HasTableInFrom
    fullName: Butterfly.Db.BaseStatement.HasTableInFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
    name: HasTableInFrom
    nameWithType: BaseStatement.HasTableInFrom
    fullName: Butterfly.Db.BaseStatement.HasTableInFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary<String, Object>)
  nameWithType: BaseStatement.ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary<String, Object>)
  fullName: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  nameWithType.vb: BaseStatement.ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary(Of String, Object))
  fullName.vb: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary(Of String, Object))
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
    name: ConfirmAllParamsUsed
    nameWithType: BaseStatement.ConfirmAllParamsUsed
    fullName: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
    name: ConfirmAllParamsUsed
    nameWithType: BaseStatement.ConfirmAllParamsUsed
    fullName: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  commentId: M:Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: ConvertParamsToDict(Object, Boolean)
  nameWithType: BaseStatement.ConvertParamsToDict(Object, Boolean)
  fullName: Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object, System.Boolean)
  nameWithType.vb: BaseStatement.ConvertParamsToDict(, Boolean)
  fullName.vb: Butterfly.Db.BaseStatement.ConvertParamsToDict(, System.Boolean)
  name.vb: ConvertParamsToDict(, Boolean)
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
    name: ConvertParamsToDict
    nameWithType: BaseStatement.ConvertParamsToDict
    fullName: Butterfly.Db.BaseStatement.ConvertParamsToDict
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
    name: ConvertParamsToDict
    nameWithType: BaseStatement.ConvertParamsToDict
    fullName: Butterfly.Db.BaseStatement.ConvertParamsToDict
  - name: (
    nameWithType: (
    fullName: (
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseStatement.EQUALS_REF_REGEX
  commentId: F:Butterfly.Db.BaseStatement.EQUALS_REF_REGEX
  parent: Butterfly.Db.BaseStatement
  name: EQUALS_REF_REGEX
  nameWithType: BaseStatement.EQUALS_REF_REGEX
  fullName: Butterfly.Db.BaseStatement.EQUALS_REF_REGEX
- uid: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  commentId: M:Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<String, Object>, StatementEqualsRef[])
  nameWithType: BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<String, Object>, StatementEqualsRef[])
  fullName: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<System.String, System.Object>, Butterfly.Db.StatementEqualsRef[])
  nameWithType.vb: BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of String, Object), StatementEqualsRef())
  fullName.vb: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of System.String, System.Object), Butterfly.Db.StatementEqualsRef())
  name.vb: RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of String, Object), StatementEqualsRef())
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
    name: RemapStatementParamsToFieldValues
    nameWithType: BaseStatement.RemapStatementParamsToFieldValues
    fullName: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Db.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Db.StatementEqualsRef
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
    name: RemapStatementParamsToFieldValues
    nameWithType: BaseStatement.RemapStatementParamsToFieldValues
    fullName: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Db.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Db.StatementEqualsRef
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Regex
  isExternal: true
  name: Regex
  nameWithType: Regex
  fullName: Regex
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Butterfly.Db.InsertStatement.#ctor*
  commentId: Overload:Butterfly.Db.InsertStatement.#ctor
  name: InsertStatement
  nameWithType: InsertStatement.InsertStatement
  fullName: Butterfly.Db.InsertStatement.InsertStatement
- uid: Butterfly.Db.IDatabase
  commentId: T:Butterfly.Db.IDatabase
  parent: Butterfly.Db
  name: IDatabase
  nameWithType: IDatabase
  fullName: Butterfly.Db.IDatabase
- uid: Butterfly.Db.InsertStatement.ParseNamesClause*
  commentId: Overload:Butterfly.Db.InsertStatement.ParseNamesClause
  name: ParseNamesClause
  nameWithType: InsertStatement.ParseNamesClause
  fullName: Butterfly.Db.InsertStatement.ParseNamesClause
- uid: List{System.String}
  commentId: '!:List{System.String}'
  definition: List`1
  name: List<String>
  nameWithType: List<String>
  fullName: List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.InsertStatement.ParseValuesClause*
  commentId: Overload:Butterfly.Db.InsertStatement.ParseValuesClause
  name: ParseValuesClause
  nameWithType: InsertStatement.ParseValuesClause
  fullName: Butterfly.Db.InsertStatement.ParseValuesClause
- uid: Butterfly.Db.InsertStatement.GetExecutableSqlAndParams*
  commentId: Overload:Butterfly.Db.InsertStatement.GetExecutableSqlAndParams
  name: GetExecutableSqlAndParams
  nameWithType: InsertStatement.GetExecutableSqlAndParams
  fullName: Butterfly.Db.InsertStatement.GetExecutableSqlAndParams
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,System.Object}'
  definition: System.Collections.Generic.Dictionary`2
  name: System.Collections.Generic.Dictionary<String, Object>
  nameWithType: System.Collections.Generic.Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: System.Collections.Generic.Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: System.Collections.Generic.Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
  commentId: T:System.ValueTuple{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
  parent: System
  isExternal: true
  name: ValueTuple<String, System.Collections.Generic.Dictionary<String, Object>>
  nameWithType: ValueTuple<String, System.Collections.Generic.Dictionary<String, Object>>
  fullName: System.ValueTuple<System.String, System.Collections.Generic.Dictionary<System.String, System.Object>>
  nameWithType.vb: ValueTuple(Of String, System.Collections.Generic.Dictionary(Of String, Object))
  fullName.vb: System.ValueTuple(Of System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: ValueTuple(Of String, System.Collections.Generic.Dictionary(Of String, Object))
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  isExternal: true
  name: System.Collections.Generic.Dictionary<, >
  nameWithType: System.Collections.Generic.Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: System.Collections.Generic.Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: System.Collections.Generic.Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Butterfly.Db.InsertStatement.GetInsertRefs*
  commentId: Overload:Butterfly.Db.InsertStatement.GetInsertRefs
  name: GetInsertRefs
  nameWithType: InsertStatement.GetInsertRefs
  fullName: Butterfly.Db.InsertStatement.GetInsertRefs
- uid: Butterfly.Db.StatementEqualsRef[]
  isExternal: true
  name: StatementEqualsRef[]
  nameWithType: StatementEqualsRef[]
  fullName: Butterfly.Db.StatementEqualsRef[]
  nameWithType.vb: StatementEqualsRef()
  fullName.vb: Butterfly.Db.StatementEqualsRef()
  name.vb: StatementEqualsRef()
  spec.csharp:
  - uid: Butterfly.Db.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Db.StatementEqualsRef
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Butterfly.Db.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Db.StatementEqualsRef
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Butterfly.Db.InsertStatement.GetNamesAndValues*
  commentId: Overload:Butterfly.Db.InsertStatement.GetNamesAndValues
  name: GetNamesAndValues
  nameWithType: InsertStatement.GetNamesAndValues
  fullName: Butterfly.Db.InsertStatement.GetNamesAndValues
- uid: System.ValueTuple{List{System.String},List{System.String}}
  commentId: T:System.ValueTuple{List{System.String},List{System.String}}
  parent: System
  isExternal: true
  name: ValueTuple<List<String>, List<String>>
  nameWithType: ValueTuple<List<String>, List<String>>
  fullName: System.ValueTuple<List<System.String>, List<System.String>>
  nameWithType.vb: ValueTuple(Of List(Of String), List(Of String))
  fullName.vb: System.ValueTuple(Of List(Of System.String), List(Of System.String))
  name.vb: ValueTuple(Of List(Of String), List(Of String))
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
