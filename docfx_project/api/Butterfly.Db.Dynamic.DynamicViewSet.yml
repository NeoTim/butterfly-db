### YamlMime:ManagedReference
items:
- uid: Butterfly.Db.Dynamic.DynamicViewSet
  commentId: T:Butterfly.Db.Dynamic.DynamicViewSet
  id: DynamicViewSet
  parent: Butterfly.Db.Dynamic
  children:
  - Butterfly.Db.Dynamic.DynamicViewSet.#ctor(Butterfly.Db.IDatabase,Action{Butterfly.Db.Event.DataEventTransaction})
  - Butterfly.Db.Dynamic.DynamicViewSet.#ctor(Butterfly.Db.IDatabase,Func{Butterfly.Db.Event.DataEventTransaction,Task})
  - Butterfly.Db.Dynamic.DynamicViewSet.asyncListener
  - Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicView(System.String,System.Object,System.String,System.String[],System.Int32)
  - Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicViewDataEvents(Butterfly.Db.Event.DataEventTransaction,Butterfly.Db.Dynamic.DynamicView)
  - Butterfly.Db.Dynamic.DynamicViewSet.disposables
  - Butterfly.Db.Dynamic.DynamicViewSet.Dispose
  - Butterfly.Db.Dynamic.DynamicViewSet.dynamicViews
  - Butterfly.Db.Dynamic.DynamicViewSet.GetImpactedRecordsStorageKey(Butterfly.Db.Dynamic.DynamicView,Butterfly.Db.Event.DataEvent,Butterfly.Db.Event.TransactionState)
  - Butterfly.Db.Dynamic.DynamicViewSet.GetInitialDataEventsAsync(Butterfly.Db.Dynamic.DynamicView)
  - Butterfly.Db.Dynamic.DynamicViewSet.HasImpactedRecords(Butterfly.Db.Event.TransactionState,Butterfly.Db.Event.DataEvent,Butterfly.Db.JoinType)
  - Butterfly.Db.Dynamic.DynamicViewSet.Id
  - Butterfly.Db.Dynamic.DynamicViewSet.incomingDataEventTransactions
  - Butterfly.Db.Dynamic.DynamicViewSet.isStarted
  - Butterfly.Db.Dynamic.DynamicViewSet.listener
  - Butterfly.Db.Dynamic.DynamicViewSet.monitor
  - Butterfly.Db.Dynamic.DynamicViewSet.ProcessCommittedDataEventTransactionAsync(Butterfly.Db.Event.DataEventTransaction)
  - Butterfly.Db.Dynamic.DynamicViewSet.ProcessUncommittedDataEventTransactionAsync(Butterfly.Db.Event.DataEventTransaction)
  - Butterfly.Db.Dynamic.DynamicViewSet.RequeryDynamicViewsAsync(System.Boolean)
  - Butterfly.Db.Dynamic.DynamicViewSet.RunAsync
  - Butterfly.Db.Dynamic.DynamicViewSet.runCancellationTokenSource
  - Butterfly.Db.Dynamic.DynamicViewSet.SendToListenerAsync(Butterfly.Db.Event.DataEventTransaction)
  - Butterfly.Db.Dynamic.DynamicViewSet.StartAsync
  - Butterfly.Db.Dynamic.DynamicViewSet.StoreImpactedRecordsInDataEventTransaction(Butterfly.Db.Event.TransactionState,Butterfly.Db.Event.DataEventTransaction)
  langs:
  - csharp
  - vb
  name: DynamicViewSet
  nameWithType: DynamicViewSet
  fullName: Butterfly.Db.Dynamic.DynamicViewSet
  type: Class
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: DynamicViewSet
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 24
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  summary: "\nRepresents a collection of <xref href=\"Butterfly.Db.Dynamic.DynamicView\" data-throw-if-not-resolved=\"false\"></xref> instances.  Often a\n<xref href=\"Butterfly.Db.Dynamic.DynamicViewSet\" data-throw-if-not-resolved=\"false\"></xref> instance will represent all the data that should be \nreplicated to a specific client.\n"
  example: []
  syntax:
    content: 'public class DynamicViewSet : IDisposable'
    content.vb: >-
      Public Class DynamicViewSet
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Butterfly.Db.Dynamic.DynamicViewSet.listener
  commentId: F:Butterfly.Db.Dynamic.DynamicViewSet.listener
  id: listener
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: listener
  nameWithType: DynamicViewSet.listener
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.listener
  type: Field
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: listener
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 27
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected readonly Action<DataEventTransaction> listener
    return:
      type: Action{Butterfly.Db.Event.DataEventTransaction}
    content.vb: Protected ReadOnly listener As Action(Of DataEventTransaction)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Db.Dynamic.DynamicViewSet.asyncListener
  commentId: F:Butterfly.Db.Dynamic.DynamicViewSet.asyncListener
  id: asyncListener
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: asyncListener
  nameWithType: DynamicViewSet.asyncListener
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.asyncListener
  type: Field
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: asyncListener
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 28
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected readonly Func<DataEventTransaction, Task> asyncListener
    return:
      type: Func{Butterfly.Db.Event.DataEventTransaction,Task}
    content.vb: Protected ReadOnly asyncListener As Func(Of DataEventTransaction, Task)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Db.Dynamic.DynamicViewSet.dynamicViews
  commentId: F:Butterfly.Db.Dynamic.DynamicViewSet.dynamicViews
  id: dynamicViews
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: dynamicViews
  nameWithType: DynamicViewSet.dynamicViews
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.dynamicViews
  type: Field
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: dynamicViews
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 30
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected readonly List<DynamicView> dynamicViews
    return:
      type: List{Butterfly.Db.Dynamic.DynamicView}
    content.vb: Protected ReadOnly dynamicViews As List(Of DynamicView)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Db.Dynamic.DynamicViewSet.incomingDataEventTransactions
  commentId: F:Butterfly.Db.Dynamic.DynamicViewSet.incomingDataEventTransactions
  id: incomingDataEventTransactions
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: incomingDataEventTransactions
  nameWithType: DynamicViewSet.incomingDataEventTransactions
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.incomingDataEventTransactions
  type: Field
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: incomingDataEventTransactions
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 31
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected readonly ConcurrentQueue<DataEventTransaction> incomingDataEventTransactions
    return:
      type: ConcurrentQueue{Butterfly.Db.Event.DataEventTransaction}
    content.vb: Protected ReadOnly incomingDataEventTransactions As ConcurrentQueue(Of DataEventTransaction)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Db.Dynamic.DynamicViewSet.runCancellationTokenSource
  commentId: F:Butterfly.Db.Dynamic.DynamicViewSet.runCancellationTokenSource
  id: runCancellationTokenSource
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: runCancellationTokenSource
  nameWithType: DynamicViewSet.runCancellationTokenSource
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.runCancellationTokenSource
  type: Field
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: runCancellationTokenSource
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 33
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected readonly CancellationTokenSource runCancellationTokenSource
    return:
      type: CancellationTokenSource
    content.vb: Protected ReadOnly runCancellationTokenSource As CancellationTokenSource
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Db.Dynamic.DynamicViewSet.monitor
  commentId: F:Butterfly.Db.Dynamic.DynamicViewSet.monitor
  id: monitor
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: monitor
  nameWithType: DynamicViewSet.monitor
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.monitor
  type: Field
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: monitor
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 34
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected readonly AsyncMonitor monitor
    return:
      type: AsyncMonitor
    content.vb: Protected ReadOnly monitor As AsyncMonitor
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Db.Dynamic.DynamicViewSet.disposables
  commentId: F:Butterfly.Db.Dynamic.DynamicViewSet.disposables
  id: disposables
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: disposables
  nameWithType: DynamicViewSet.disposables
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.disposables
  type: Field
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: disposables
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 36
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected readonly List<IDisposable> disposables
    return:
      type: List{IDisposable}
    content.vb: Protected ReadOnly disposables As List(Of IDisposable)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Db.Dynamic.DynamicViewSet.#ctor(Butterfly.Db.IDatabase,Action{Butterfly.Db.Event.DataEventTransaction})
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.#ctor(Butterfly.Db.IDatabase,Action{Butterfly.Db.Event.DataEventTransaction})
  id: '#ctor(Butterfly.Db.IDatabase,Action{Butterfly.Db.Event.DataEventTransaction})'
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: DynamicViewSet(IDatabase, Action<DataEventTransaction>)
  nameWithType: DynamicViewSet.DynamicViewSet(IDatabase, Action<DataEventTransaction>)
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.DynamicViewSet(Butterfly.Db.IDatabase, Action<Butterfly.Db.Event.DataEventTransaction>)
  type: Constructor
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: .ctor
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 38
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: public DynamicViewSet(IDatabase database, Action<DataEventTransaction> listener)
    parameters:
    - id: database
      type: Butterfly.Db.IDatabase
    - id: listener
      type: Action{Butterfly.Db.Event.DataEventTransaction}
    content.vb: Public Sub New(database As IDatabase, listener As Action(Of DataEventTransaction))
  overload: Butterfly.Db.Dynamic.DynamicViewSet.#ctor*
  nameWithType.vb: DynamicViewSet.DynamicViewSet(IDatabase, Action(Of DataEventTransaction))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Butterfly.Db.Dynamic.DynamicViewSet.DynamicViewSet(Butterfly.Db.IDatabase, Action(Of Butterfly.Db.Event.DataEventTransaction))
  name.vb: DynamicViewSet(IDatabase, Action(Of DataEventTransaction))
- uid: Butterfly.Db.Dynamic.DynamicViewSet.#ctor(Butterfly.Db.IDatabase,Func{Butterfly.Db.Event.DataEventTransaction,Task})
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.#ctor(Butterfly.Db.IDatabase,Func{Butterfly.Db.Event.DataEventTransaction,Task})
  id: '#ctor(Butterfly.Db.IDatabase,Func{Butterfly.Db.Event.DataEventTransaction,Task})'
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: DynamicViewSet(IDatabase, Func<DataEventTransaction, Task>)
  nameWithType: DynamicViewSet.DynamicViewSet(IDatabase, Func<DataEventTransaction, Task>)
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.DynamicViewSet(Butterfly.Db.IDatabase, Func<Butterfly.Db.Event.DataEventTransaction, Task>)
  type: Constructor
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: .ctor
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 44
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: public DynamicViewSet(IDatabase database, Func<DataEventTransaction, Task> asyncListener)
    parameters:
    - id: database
      type: Butterfly.Db.IDatabase
    - id: asyncListener
      type: Func{Butterfly.Db.Event.DataEventTransaction,Task}
    content.vb: Public Sub New(database As IDatabase, asyncListener As Func(Of DataEventTransaction, Task))
  overload: Butterfly.Db.Dynamic.DynamicViewSet.#ctor*
  nameWithType.vb: DynamicViewSet.DynamicViewSet(IDatabase, Func(Of DataEventTransaction, Task))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Butterfly.Db.Dynamic.DynamicViewSet.DynamicViewSet(Butterfly.Db.IDatabase, Func(Of Butterfly.Db.Event.DataEventTransaction, Task))
  name.vb: DynamicViewSet(IDatabase, Func(Of DataEventTransaction, Task))
- uid: Butterfly.Db.Dynamic.DynamicViewSet.Id
  commentId: P:Butterfly.Db.Dynamic.DynamicViewSet.Id
  id: Id
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: DynamicViewSet.Id
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.Id
  type: Property
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: Id
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 50
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: public string Id { get; protected set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Id As String
  overload: Butterfly.Db.Dynamic.DynamicViewSet.Id*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicView(System.String,System.Object,System.String,System.String[],System.Int32)
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicView(System.String,System.Object,System.String,System.String[],System.Int32)
  id: CreateDynamicView(System.String,System.Object,System.String,System.String[],System.Int32)
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: CreateDynamicView(String, Object, String, String[], Int32)
  nameWithType: DynamicViewSet.CreateDynamicView(String, Object, String, String[], Int32)
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicView(System.String, System.Object, System.String, System.String[], System.Int32)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: CreateDynamicView
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 64
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  summary: "\nCreates an instance of a DynamicView. Must call <xref href=\"Butterfly.Db.Dynamic.DynamicViewSet.StartAsync\" data-throw-if-not-resolved=\"false\"></xref> to send \ninitial <xref href=\"Butterfly.Db.Event.DataEventTransaction\" data-throw-if-not-resolved=\"false\"></xref> instance and listen for new <xref href=\"Butterfly.Db.Event.DataEventTransaction\" data-throw-if-not-resolved=\"false\"></xref>instances.\n"
  example: []
  syntax:
    content: public DynamicView CreateDynamicView(string sql, dynamic values = null, string name = null, string[] keyFieldNames = null, int limit = null)
    parameters:
    - id: sql
      type: System.String
    - id: values
      type: System.Object
    - id: name
      type: System.String
    - id: keyFieldNames
      type: System.String[]
    - id: limit
      type: System.Int32
    return:
      type: Butterfly.Db.Dynamic.DynamicView
    content.vb: Public Function CreateDynamicView(sql As String, values As Object = Nothing, name As String = Nothing, keyFieldNames As String() = Nothing, limit As Integer = Nothing) As DynamicView
  overload: Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicView*
  nameWithType.vb: DynamicViewSet.CreateDynamicView(String, Object, String, String(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicView(System.String, System.Object, System.String, System.String(), System.Int32)
  name.vb: CreateDynamicView(String, Object, String, String(), Int32)
- uid: Butterfly.Db.Dynamic.DynamicViewSet.isStarted
  commentId: F:Butterfly.Db.Dynamic.DynamicViewSet.isStarted
  id: isStarted
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: isStarted
  nameWithType: DynamicViewSet.isStarted
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.isStarted
  type: Field
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: isStarted
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 70
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected bool isStarted
    return:
      type: System.Boolean
    content.vb: Protected isStarted As Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Butterfly.Db.Dynamic.DynamicViewSet.StartAsync
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.StartAsync
  id: StartAsync
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: StartAsync()
  nameWithType: DynamicViewSet.StartAsync()
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.StartAsync()
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: StartAsync
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 77
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  summary: "\nSend an initial <xref href=\"Butterfly.Db.Event.DataEventTransaction\" data-throw-if-not-resolved=\"false\"></xref> to the registered listener and\nsends new <xref href=\"Butterfly.Db.Event.DataEventTransaction\" data-throw-if-not-resolved=\"false\"></xref> instances when any data in the underlying\n<xref href=\"Butterfly.Db.Dynamic.DynamicView\" data-throw-if-not-resolved=\"false\"></xref> instances changes. Stops listening <xref href=\"Butterfly.Db.Dynamic.DynamicViewSet.Dispose\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public Task<DynamicViewSet> StartAsync()
    return:
      type: Task{Butterfly.Db.Dynamic.DynamicViewSet}
      description: ''
    content.vb: Public Function StartAsync As Task(Of DynamicViewSet)
  overload: Butterfly.Db.Dynamic.DynamicViewSet.StartAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Db.Dynamic.DynamicViewSet.ProcessUncommittedDataEventTransactionAsync(Butterfly.Db.Event.DataEventTransaction)
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.ProcessUncommittedDataEventTransactionAsync(Butterfly.Db.Event.DataEventTransaction)
  id: ProcessUncommittedDataEventTransactionAsync(Butterfly.Db.Event.DataEventTransaction)
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: ProcessUncommittedDataEventTransactionAsync(DataEventTransaction)
  nameWithType: DynamicViewSet.ProcessUncommittedDataEventTransactionAsync(DataEventTransaction)
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.ProcessUncommittedDataEventTransactionAsync(Butterfly.Db.Event.DataEventTransaction)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: ProcessUncommittedDataEventTransactionAsync
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 98
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected Task ProcessUncommittedDataEventTransactionAsync(DataEventTransaction dataEventTransaction)
    parameters:
    - id: dataEventTransaction
      type: Butterfly.Db.Event.DataEventTransaction
    return:
      type: Task
    content.vb: Protected Function ProcessUncommittedDataEventTransactionAsync(dataEventTransaction As DataEventTransaction) As Task
  overload: Butterfly.Db.Dynamic.DynamicViewSet.ProcessUncommittedDataEventTransactionAsync*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Butterfly.Db.Dynamic.DynamicViewSet.ProcessCommittedDataEventTransactionAsync(Butterfly.Db.Event.DataEventTransaction)
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.ProcessCommittedDataEventTransactionAsync(Butterfly.Db.Event.DataEventTransaction)
  id: ProcessCommittedDataEventTransactionAsync(Butterfly.Db.Event.DataEventTransaction)
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: ProcessCommittedDataEventTransactionAsync(DataEventTransaction)
  nameWithType: DynamicViewSet.ProcessCommittedDataEventTransactionAsync(DataEventTransaction)
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.ProcessCommittedDataEventTransactionAsync(Butterfly.Db.Event.DataEventTransaction)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: ProcessCommittedDataEventTransactionAsync
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 102
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected Task ProcessCommittedDataEventTransactionAsync(DataEventTransaction dataEventTransaction)
    parameters:
    - id: dataEventTransaction
      type: Butterfly.Db.Event.DataEventTransaction
    return:
      type: Task
    content.vb: Protected Function ProcessCommittedDataEventTransactionAsync(dataEventTransaction As DataEventTransaction) As Task
  overload: Butterfly.Db.Dynamic.DynamicViewSet.ProcessCommittedDataEventTransactionAsync*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Butterfly.Db.Dynamic.DynamicViewSet.StoreImpactedRecordsInDataEventTransaction(Butterfly.Db.Event.TransactionState,Butterfly.Db.Event.DataEventTransaction)
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.StoreImpactedRecordsInDataEventTransaction(Butterfly.Db.Event.TransactionState,Butterfly.Db.Event.DataEventTransaction)
  id: StoreImpactedRecordsInDataEventTransaction(Butterfly.Db.Event.TransactionState,Butterfly.Db.Event.DataEventTransaction)
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: StoreImpactedRecordsInDataEventTransaction(TransactionState, DataEventTransaction)
  nameWithType: DynamicViewSet.StoreImpactedRecordsInDataEventTransaction(TransactionState, DataEventTransaction)
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.StoreImpactedRecordsInDataEventTransaction(Butterfly.Db.Event.TransactionState, Butterfly.Db.Event.DataEventTransaction)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: StoreImpactedRecordsInDataEventTransaction
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 109
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected Task StoreImpactedRecordsInDataEventTransaction(TransactionState transactionState, DataEventTransaction dataEventTransaction)
    parameters:
    - id: transactionState
      type: Butterfly.Db.Event.TransactionState
    - id: dataEventTransaction
      type: Butterfly.Db.Event.DataEventTransaction
    return:
      type: Task
    content.vb: Protected Function StoreImpactedRecordsInDataEventTransaction(transactionState As TransactionState, dataEventTransaction As DataEventTransaction) As Task
  overload: Butterfly.Db.Dynamic.DynamicViewSet.StoreImpactedRecordsInDataEventTransaction*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Butterfly.Db.Dynamic.DynamicViewSet.GetImpactedRecordsStorageKey(Butterfly.Db.Dynamic.DynamicView,Butterfly.Db.Event.DataEvent,Butterfly.Db.Event.TransactionState)
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.GetImpactedRecordsStorageKey(Butterfly.Db.Dynamic.DynamicView,Butterfly.Db.Event.DataEvent,Butterfly.Db.Event.TransactionState)
  id: GetImpactedRecordsStorageKey(Butterfly.Db.Dynamic.DynamicView,Butterfly.Db.Event.DataEvent,Butterfly.Db.Event.TransactionState)
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: GetImpactedRecordsStorageKey(DynamicView, DataEvent, TransactionState)
  nameWithType: DynamicViewSet.GetImpactedRecordsStorageKey(DynamicView, DataEvent, TransactionState)
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.GetImpactedRecordsStorageKey(Butterfly.Db.Dynamic.DynamicView, Butterfly.Db.Event.DataEvent, Butterfly.Db.Event.TransactionState)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: GetImpactedRecordsStorageKey
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 125
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected string GetImpactedRecordsStorageKey(DynamicView dynamicView, DataEvent dataEvent, TransactionState transactionState)
    parameters:
    - id: dynamicView
      type: Butterfly.Db.Dynamic.DynamicView
    - id: dataEvent
      type: Butterfly.Db.Event.DataEvent
    - id: transactionState
      type: Butterfly.Db.Event.TransactionState
    return:
      type: System.String
    content.vb: Protected Function GetImpactedRecordsStorageKey(dynamicView As DynamicView, dataEvent As DataEvent, transactionState As TransactionState) As String
  overload: Butterfly.Db.Dynamic.DynamicViewSet.GetImpactedRecordsStorageKey*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Butterfly.Db.Dynamic.DynamicViewSet.HasImpactedRecords(Butterfly.Db.Event.TransactionState,Butterfly.Db.Event.DataEvent,Butterfly.Db.JoinType)
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.HasImpactedRecords(Butterfly.Db.Event.TransactionState,Butterfly.Db.Event.DataEvent,Butterfly.Db.JoinType)
  id: HasImpactedRecords(Butterfly.Db.Event.TransactionState,Butterfly.Db.Event.DataEvent,Butterfly.Db.JoinType)
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: HasImpactedRecords(TransactionState, DataEvent, JoinType)
  nameWithType: DynamicViewSet.HasImpactedRecords(TransactionState, DataEvent, JoinType)
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.HasImpactedRecords(Butterfly.Db.Event.TransactionState, Butterfly.Db.Event.DataEvent, Butterfly.Db.JoinType)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: HasImpactedRecords
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 129
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected bool HasImpactedRecords(TransactionState transactionState, DataEvent dataEvent, JoinType joinType)
    parameters:
    - id: transactionState
      type: Butterfly.Db.Event.TransactionState
    - id: dataEvent
      type: Butterfly.Db.Event.DataEvent
    - id: joinType
      type: Butterfly.Db.JoinType
    return:
      type: System.Boolean
    content.vb: Protected Function HasImpactedRecords(transactionState As TransactionState, dataEvent As DataEvent, joinType As JoinType) As Boolean
  overload: Butterfly.Db.Dynamic.DynamicViewSet.HasImpactedRecords*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Butterfly.Db.Dynamic.DynamicViewSet.RunAsync
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.RunAsync
  id: RunAsync
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: RunAsync()
  nameWithType: DynamicViewSet.RunAsync()
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.RunAsync()
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: RunAsync
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 148
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  summary: "\nProcesses queued data change transactions (runs on a background thread)\n"
  example: []
  syntax:
    content: protected Task RunAsync()
    return:
      type: Task
      description: ''
    content.vb: Protected Function RunAsync As Task
  overload: Butterfly.Db.Dynamic.DynamicViewSet.RunAsync*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicViewDataEvents(Butterfly.Db.Event.DataEventTransaction,Butterfly.Db.Dynamic.DynamicView)
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicViewDataEvents(Butterfly.Db.Event.DataEventTransaction,Butterfly.Db.Dynamic.DynamicView)
  id: CreateDynamicViewDataEvents(Butterfly.Db.Event.DataEventTransaction,Butterfly.Db.Dynamic.DynamicView)
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: CreateDynamicViewDataEvents(DataEventTransaction, DynamicView)
  nameWithType: DynamicViewSet.CreateDynamicViewDataEvents(DataEventTransaction, DynamicView)
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicViewDataEvents(Butterfly.Db.Event.DataEventTransaction, Butterfly.Db.Dynamic.DynamicView)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: CreateDynamicViewDataEvents
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 178
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected DataEvent[] CreateDynamicViewDataEvents(DataEventTransaction dataEventTransaction, DynamicView dynamicView)
    parameters:
    - id: dataEventTransaction
      type: Butterfly.Db.Event.DataEventTransaction
    - id: dynamicView
      type: Butterfly.Db.Dynamic.DynamicView
    return:
      type: Butterfly.Db.Event.DataEvent[]
    content.vb: Protected Function CreateDynamicViewDataEvents(dataEventTransaction As DataEventTransaction, dynamicView As DynamicView) As DataEvent()
  overload: Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicViewDataEvents*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Butterfly.Db.Dynamic.DynamicViewSet.SendToListenerAsync(Butterfly.Db.Event.DataEventTransaction)
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.SendToListenerAsync(Butterfly.Db.Event.DataEventTransaction)
  id: SendToListenerAsync(Butterfly.Db.Event.DataEventTransaction)
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: SendToListenerAsync(DataEventTransaction)
  nameWithType: DynamicViewSet.SendToListenerAsync(DataEventTransaction)
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.SendToListenerAsync(Butterfly.Db.Event.DataEventTransaction)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: SendToListenerAsync
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 221
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected Task SendToListenerAsync(DataEventTransaction dataEventTransaction)
    parameters:
    - id: dataEventTransaction
      type: Butterfly.Db.Event.DataEventTransaction
    return:
      type: Task
    content.vb: Protected Function SendToListenerAsync(dataEventTransaction As DataEventTransaction) As Task
  overload: Butterfly.Db.Dynamic.DynamicViewSet.SendToListenerAsync*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Butterfly.Db.Dynamic.DynamicViewSet.RequeryDynamicViewsAsync(System.Boolean)
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.RequeryDynamicViewsAsync(System.Boolean)
  id: RequeryDynamicViewsAsync(System.Boolean)
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: RequeryDynamicViewsAsync(Boolean)
  nameWithType: DynamicViewSet.RequeryDynamicViewsAsync(Boolean)
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.RequeryDynamicViewsAsync(System.Boolean)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: RequeryDynamicViewsAsync
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 238
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  summary: "\nReturn the initial query results if any of the query parameters have changed or if passed force=true\n"
  example: []
  syntax:
    content: protected Task<DataEvent[]> RequeryDynamicViewsAsync(bool onlyIfDirtyParams)
    parameters:
    - id: onlyIfDirtyParams
      type: System.Boolean
      description: ''
    return:
      type: Task{Butterfly.Db.Event.DataEvent[]}
      description: ''
    content.vb: Protected Function RequeryDynamicViewsAsync(onlyIfDirtyParams As Boolean) As Task(Of DataEvent())
  overload: Butterfly.Db.Dynamic.DynamicViewSet.RequeryDynamicViewsAsync*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Butterfly.Db.Dynamic.DynamicViewSet.GetInitialDataEventsAsync(Butterfly.Db.Dynamic.DynamicView)
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.GetInitialDataEventsAsync(Butterfly.Db.Dynamic.DynamicView)
  id: GetInitialDataEventsAsync(Butterfly.Db.Dynamic.DynamicView)
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: GetInitialDataEventsAsync(DynamicView)
  nameWithType: DynamicViewSet.GetInitialDataEventsAsync(DynamicView)
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.GetInitialDataEventsAsync(Butterfly.Db.Dynamic.DynamicView)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: GetInitialDataEventsAsync
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 254
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected Task<DataEvent[]> GetInitialDataEventsAsync(DynamicView dynamicView)
    parameters:
    - id: dynamicView
      type: Butterfly.Db.Dynamic.DynamicView
    return:
      type: Task{Butterfly.Db.Event.DataEvent[]}
    content.vb: Protected Function GetInitialDataEventsAsync(dynamicView As DynamicView) As Task(Of DataEvent())
  overload: Butterfly.Db.Dynamic.DynamicViewSet.GetInitialDataEventsAsync*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Butterfly.Db.Dynamic.DynamicViewSet.Dispose
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.Dispose
  id: Dispose
  parent: Butterfly.Db.Dynamic.DynamicViewSet
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DynamicViewSet.Dispose()
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.Dispose()
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/DynamicViewSet.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: Dispose
    path: ../Butterfly.Db/Dynamic/DynamicViewSet.cs
    startLine: 261
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Butterfly.Db.Dynamic.DynamicViewSet.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Butterfly.Db.Dynamic.DynamicView
  commentId: T:Butterfly.Db.Dynamic.DynamicView
  parent: Butterfly.Db.Dynamic
  name: DynamicView
  nameWithType: DynamicView
  fullName: Butterfly.Db.Dynamic.DynamicView
- uid: Butterfly.Db.Dynamic.DynamicViewSet
  commentId: T:Butterfly.Db.Dynamic.DynamicViewSet
  parent: Butterfly.Db.Dynamic
  name: DynamicViewSet
  nameWithType: DynamicViewSet
  fullName: Butterfly.Db.Dynamic.DynamicViewSet
- uid: Butterfly.Db.Dynamic
  commentId: N:Butterfly.Db.Dynamic
  name: Butterfly.Db.Dynamic
  nameWithType: Butterfly.Db.Dynamic
  fullName: Butterfly.Db.Dynamic
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Action{Butterfly.Db.Event.DataEventTransaction}
  commentId: '!:Action{Butterfly.Db.Event.DataEventTransaction}'
  definition: Action`1
  name: Action<DataEventTransaction>
  nameWithType: Action<DataEventTransaction>
  fullName: Action<Butterfly.Db.Event.DataEventTransaction>
  nameWithType.vb: Action(Of DataEventTransaction)
  fullName.vb: Action(Of Butterfly.Db.Event.DataEventTransaction)
  name.vb: Action(Of DataEventTransaction)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{Butterfly.Db.Event.DataEventTransaction,Task}
  commentId: '!:Func{Butterfly.Db.Event.DataEventTransaction,Task}'
  definition: Func`2
  name: Func<DataEventTransaction, Task>
  nameWithType: Func<DataEventTransaction, Task>
  fullName: Func<Butterfly.Db.Event.DataEventTransaction, Task>
  nameWithType.vb: Func(Of DataEventTransaction, Task)
  fullName.vb: Func(Of Butterfly.Db.Event.DataEventTransaction, Task)
  name.vb: Func(Of DataEventTransaction, Task)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: List{Butterfly.Db.Dynamic.DynamicView}
  commentId: '!:List{Butterfly.Db.Dynamic.DynamicView}'
  definition: List`1
  name: List<DynamicView>
  nameWithType: List<DynamicView>
  fullName: List<Butterfly.Db.Dynamic.DynamicView>
  nameWithType.vb: List(Of DynamicView)
  fullName.vb: List(Of Butterfly.Db.Dynamic.DynamicView)
  name.vb: List(Of DynamicView)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Dynamic.DynamicView
    name: DynamicView
    nameWithType: DynamicView
    fullName: Butterfly.Db.Dynamic.DynamicView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Dynamic.DynamicView
    name: DynamicView
    nameWithType: DynamicView
    fullName: Butterfly.Db.Dynamic.DynamicView
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: ConcurrentQueue{Butterfly.Db.Event.DataEventTransaction}
  commentId: '!:ConcurrentQueue{Butterfly.Db.Event.DataEventTransaction}'
  definition: ConcurrentQueue`1
  name: ConcurrentQueue<DataEventTransaction>
  nameWithType: ConcurrentQueue<DataEventTransaction>
  fullName: ConcurrentQueue<Butterfly.Db.Event.DataEventTransaction>
  nameWithType.vb: ConcurrentQueue(Of DataEventTransaction)
  fullName.vb: ConcurrentQueue(Of Butterfly.Db.Event.DataEventTransaction)
  name.vb: ConcurrentQueue(Of DataEventTransaction)
  spec.csharp:
  - uid: ConcurrentQueue`1
    name: ConcurrentQueue
    nameWithType: ConcurrentQueue
    fullName: ConcurrentQueue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ConcurrentQueue`1
    name: ConcurrentQueue
    nameWithType: ConcurrentQueue
    fullName: ConcurrentQueue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: ConcurrentQueue`1
  commentId: '!:ConcurrentQueue`1'
  isExternal: true
  name: ConcurrentQueue<>
  nameWithType: ConcurrentQueue<>
  fullName: ConcurrentQueue<>
  nameWithType.vb: ConcurrentQueue(Of )
  fullName.vb: ConcurrentQueue(Of )
  name.vb: ConcurrentQueue(Of )
  spec.csharp:
  - uid: ConcurrentQueue`1
    name: ConcurrentQueue
    nameWithType: ConcurrentQueue
    fullName: ConcurrentQueue
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ConcurrentQueue`1
    name: ConcurrentQueue
    nameWithType: ConcurrentQueue
    fullName: ConcurrentQueue
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CancellationTokenSource
  commentId: '!:CancellationTokenSource'
  isExternal: true
  name: CancellationTokenSource
  nameWithType: CancellationTokenSource
  fullName: CancellationTokenSource
- uid: AsyncMonitor
  commentId: '!:AsyncMonitor'
  isExternal: true
  name: AsyncMonitor
  nameWithType: AsyncMonitor
  fullName: AsyncMonitor
- uid: List{IDisposable}
  commentId: '!:List{IDisposable}'
  definition: List`1
  name: List<IDisposable>
  nameWithType: List<IDisposable>
  fullName: List<IDisposable>
  nameWithType.vb: List(Of IDisposable)
  fullName.vb: List(Of IDisposable)
  name.vb: List(Of IDisposable)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: IDisposable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: IDisposable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Dynamic.DynamicViewSet.#ctor*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.#ctor
  name: DynamicViewSet
  nameWithType: DynamicViewSet.DynamicViewSet
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.DynamicViewSet
- uid: Butterfly.Db.IDatabase
  commentId: T:Butterfly.Db.IDatabase
  parent: Butterfly.Db
  name: IDatabase
  nameWithType: IDatabase
  fullName: Butterfly.Db.IDatabase
- uid: Butterfly.Db
  commentId: N:Butterfly.Db
  name: Butterfly.Db
  nameWithType: Butterfly.Db
  fullName: Butterfly.Db
- uid: Butterfly.Db.Dynamic.DynamicViewSet.Id*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.Id
  name: Id
  nameWithType: DynamicViewSet.Id
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.Id
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Butterfly.Db.Dynamic.DynamicViewSet.StartAsync
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.StartAsync
  isExternal: true
- uid: Butterfly.Db.Event.DataEventTransaction
  commentId: T:Butterfly.Db.Event.DataEventTransaction
  parent: Butterfly.Db.Event
  name: DataEventTransaction
  nameWithType: DataEventTransaction
  fullName: Butterfly.Db.Event.DataEventTransaction
- uid: Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicView*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicView
  name: CreateDynamicView
  nameWithType: DynamicViewSet.CreateDynamicView
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicView
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Butterfly.Db.Event
  commentId: N:Butterfly.Db.Event
  name: Butterfly.Db.Event
  nameWithType: Butterfly.Db.Event
  fullName: Butterfly.Db.Event
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Butterfly.Db.Dynamic.DynamicViewSet.Dispose
  commentId: M:Butterfly.Db.Dynamic.DynamicViewSet.Dispose
  isExternal: true
- uid: Butterfly.Db.Dynamic.DynamicViewSet.StartAsync*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.StartAsync
  name: StartAsync
  nameWithType: DynamicViewSet.StartAsync
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.StartAsync
- uid: Task{Butterfly.Db.Dynamic.DynamicViewSet}
  commentId: '!:Task{Butterfly.Db.Dynamic.DynamicViewSet}'
  definition: Task`1
  name: Task<DynamicViewSet>
  nameWithType: Task<DynamicViewSet>
  fullName: Task<Butterfly.Db.Dynamic.DynamicViewSet>
  nameWithType.vb: Task(Of DynamicViewSet)
  fullName.vb: Task(Of Butterfly.Db.Dynamic.DynamicViewSet)
  name.vb: Task(Of DynamicViewSet)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Dynamic.DynamicViewSet
    name: DynamicViewSet
    nameWithType: DynamicViewSet
    fullName: Butterfly.Db.Dynamic.DynamicViewSet
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Dynamic.DynamicViewSet
    name: DynamicViewSet
    nameWithType: DynamicViewSet
    fullName: Butterfly.Db.Dynamic.DynamicViewSet
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Dynamic.DynamicViewSet.ProcessUncommittedDataEventTransactionAsync*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.ProcessUncommittedDataEventTransactionAsync
  name: ProcessUncommittedDataEventTransactionAsync
  nameWithType: DynamicViewSet.ProcessUncommittedDataEventTransactionAsync
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.ProcessUncommittedDataEventTransactionAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Butterfly.Db.Dynamic.DynamicViewSet.ProcessCommittedDataEventTransactionAsync*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.ProcessCommittedDataEventTransactionAsync
  name: ProcessCommittedDataEventTransactionAsync
  nameWithType: DynamicViewSet.ProcessCommittedDataEventTransactionAsync
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.ProcessCommittedDataEventTransactionAsync
- uid: Butterfly.Db.Dynamic.DynamicViewSet.StoreImpactedRecordsInDataEventTransaction*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.StoreImpactedRecordsInDataEventTransaction
  name: StoreImpactedRecordsInDataEventTransaction
  nameWithType: DynamicViewSet.StoreImpactedRecordsInDataEventTransaction
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.StoreImpactedRecordsInDataEventTransaction
- uid: Butterfly.Db.Event.TransactionState
  commentId: T:Butterfly.Db.Event.TransactionState
  parent: Butterfly.Db.Event
  name: TransactionState
  nameWithType: TransactionState
  fullName: Butterfly.Db.Event.TransactionState
- uid: Butterfly.Db.Dynamic.DynamicViewSet.GetImpactedRecordsStorageKey*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.GetImpactedRecordsStorageKey
  name: GetImpactedRecordsStorageKey
  nameWithType: DynamicViewSet.GetImpactedRecordsStorageKey
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.GetImpactedRecordsStorageKey
- uid: Butterfly.Db.Event.DataEvent
  commentId: T:Butterfly.Db.Event.DataEvent
  parent: Butterfly.Db.Event
  name: DataEvent
  nameWithType: DataEvent
  fullName: Butterfly.Db.Event.DataEvent
- uid: Butterfly.Db.Dynamic.DynamicViewSet.HasImpactedRecords*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.HasImpactedRecords
  name: HasImpactedRecords
  nameWithType: DynamicViewSet.HasImpactedRecords
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.HasImpactedRecords
- uid: Butterfly.Db.JoinType
  commentId: T:Butterfly.Db.JoinType
  parent: Butterfly.Db
  name: JoinType
  nameWithType: JoinType
  fullName: Butterfly.Db.JoinType
- uid: Butterfly.Db.Dynamic.DynamicViewSet.RunAsync*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.RunAsync
  name: RunAsync
  nameWithType: DynamicViewSet.RunAsync
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.RunAsync
- uid: Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicViewDataEvents*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicViewDataEvents
  name: CreateDynamicViewDataEvents
  nameWithType: DynamicViewSet.CreateDynamicViewDataEvents
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.CreateDynamicViewDataEvents
- uid: Butterfly.Db.Event.DataEvent[]
  isExternal: true
  name: DataEvent[]
  nameWithType: DataEvent[]
  fullName: Butterfly.Db.Event.DataEvent[]
  nameWithType.vb: DataEvent()
  fullName.vb: Butterfly.Db.Event.DataEvent()
  name.vb: DataEvent()
  spec.csharp:
  - uid: Butterfly.Db.Event.DataEvent
    name: DataEvent
    nameWithType: DataEvent
    fullName: Butterfly.Db.Event.DataEvent
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Butterfly.Db.Event.DataEvent
    name: DataEvent
    nameWithType: DataEvent
    fullName: Butterfly.Db.Event.DataEvent
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Butterfly.Db.Dynamic.DynamicViewSet.SendToListenerAsync*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.SendToListenerAsync
  name: SendToListenerAsync
  nameWithType: DynamicViewSet.SendToListenerAsync
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.SendToListenerAsync
- uid: Butterfly.Db.Dynamic.DynamicViewSet.RequeryDynamicViewsAsync*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.RequeryDynamicViewsAsync
  name: RequeryDynamicViewsAsync
  nameWithType: DynamicViewSet.RequeryDynamicViewsAsync
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.RequeryDynamicViewsAsync
- uid: Task{Butterfly.Db.Event.DataEvent[]}
  commentId: '!:Task{Butterfly.Db.Event.DataEvent[]}'
  definition: Task`1
  name: Task<DataEvent[]>
  nameWithType: Task<DataEvent[]>
  fullName: Task<Butterfly.Db.Event.DataEvent[]>
  nameWithType.vb: Task(Of DataEvent())
  fullName.vb: Task(Of Butterfly.Db.Event.DataEvent())
  name.vb: Task(Of DataEvent())
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEvent
    name: DataEvent
    nameWithType: DataEvent
    fullName: Butterfly.Db.Event.DataEvent
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEvent
    name: DataEvent
    nameWithType: DataEvent
    fullName: Butterfly.Db.Event.DataEvent
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Dynamic.DynamicViewSet.GetInitialDataEventsAsync*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.GetInitialDataEventsAsync
  name: GetInitialDataEventsAsync
  nameWithType: DynamicViewSet.GetInitialDataEventsAsync
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.GetInitialDataEventsAsync
- uid: Butterfly.Db.Dynamic.DynamicViewSet.Dispose*
  commentId: Overload:Butterfly.Db.Dynamic.DynamicViewSet.Dispose
  name: Dispose
  nameWithType: DynamicViewSet.Dispose
  fullName: Butterfly.Db.Dynamic.DynamicViewSet.Dispose
shouldSkipMarkup: true
