### YamlMime:ManagedReference
items:
- uid: Butterfly.Db.DeleteStatement
  commentId: T:Butterfly.Db.DeleteStatement
  id: DeleteStatement
  parent: Butterfly.Db
  children:
  - Butterfly.Db.DeleteStatement.#ctor(Butterfly.Db.IDatabase,System.String)
  - Butterfly.Db.DeleteStatement.fromClause
  - Butterfly.Db.DeleteStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  - Butterfly.Db.DeleteStatement.GetWhereIndexAndWhereRefs(Butterfly.Db.IDatabase,System.Collections.Generic.Dictionary{System.String,System.Object})
  - Butterfly.Db.DeleteStatement.STATEMENT_REGEX
  - Butterfly.Db.DeleteStatement.whereClause
  langs:
  - csharp
  - vb
  name: DeleteStatement
  nameWithType: DeleteStatement
  fullName: Butterfly.Db.DeleteStatement
  type: Class
  source:
    remote:
      path: Butterfly.Db/Statements/DeleteStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: DeleteStatement
    path: ../Butterfly.Db/Statements/DeleteStatement.cs
    startLine: 14
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  summary: "\nInternal class used to parse DELETE statements\n"
  example: []
  syntax:
    content: 'public class DeleteStatement : BaseStatement'
    content.vb: >-
      Public Class DeleteStatement
          Inherits BaseStatement
  inheritance:
  - System.Object
  - Butterfly.Db.BaseStatement
  inheritedMembers:
  - Butterfly.Db.BaseStatement.IsSqlTableName
  - Butterfly.Db.BaseStatement.Sql
  - Butterfly.Db.BaseStatement.StatementFromRefs
  - Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  - Butterfly.Db.BaseStatement.fromTableNames
  - Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
  - Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  - Butterfly.Db.BaseStatement.EQUALS_REF_REGEX
  - Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Butterfly.Db.DeleteStatement.STATEMENT_REGEX
  commentId: F:Butterfly.Db.DeleteStatement.STATEMENT_REGEX
  id: STATEMENT_REGEX
  parent: Butterfly.Db.DeleteStatement
  langs:
  - csharp
  - vb
  name: STATEMENT_REGEX
  nameWithType: DeleteStatement.STATEMENT_REGEX
  fullName: Butterfly.Db.DeleteStatement.STATEMENT_REGEX
  type: Field
  source:
    remote:
      path: Butterfly.Db/Statements/DeleteStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: STATEMENT_REGEX
    path: ../Butterfly.Db/Statements/DeleteStatement.cs
    startLine: 15
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: protected static readonly Regex STATEMENT_REGEX
    return:
      type: Regex
    content.vb: Protected Shared ReadOnly STATEMENT_REGEX As Regex
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Butterfly.Db.DeleteStatement.fromClause
  commentId: F:Butterfly.Db.DeleteStatement.fromClause
  id: fromClause
  parent: Butterfly.Db.DeleteStatement
  langs:
  - csharp
  - vb
  name: fromClause
  nameWithType: DeleteStatement.fromClause
  fullName: Butterfly.Db.DeleteStatement.fromClause
  type: Field
  source:
    remote:
      path: Butterfly.Db/Statements/DeleteStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: fromClause
    path: ../Butterfly.Db/Statements/DeleteStatement.cs
    startLine: 17
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public readonly string fromClause
    return:
      type: System.String
    content.vb: Public ReadOnly fromClause As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Butterfly.Db.DeleteStatement.whereClause
  commentId: F:Butterfly.Db.DeleteStatement.whereClause
  id: whereClause
  parent: Butterfly.Db.DeleteStatement
  langs:
  - csharp
  - vb
  name: whereClause
  nameWithType: DeleteStatement.whereClause
  fullName: Butterfly.Db.DeleteStatement.whereClause
  type: Field
  source:
    remote:
      path: Butterfly.Db/Statements/DeleteStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: whereClause
    path: ../Butterfly.Db/Statements/DeleteStatement.cs
    startLine: 18
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public readonly string whereClause
    return:
      type: System.String
    content.vb: Public ReadOnly whereClause As String
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Butterfly.Db.DeleteStatement.#ctor(Butterfly.Db.IDatabase,System.String)
  commentId: M:Butterfly.Db.DeleteStatement.#ctor(Butterfly.Db.IDatabase,System.String)
  id: '#ctor(Butterfly.Db.IDatabase,System.String)'
  parent: Butterfly.Db.DeleteStatement
  langs:
  - csharp
  - vb
  name: DeleteStatement(IDatabase, String)
  nameWithType: DeleteStatement.DeleteStatement(IDatabase, String)
  fullName: Butterfly.Db.DeleteStatement.DeleteStatement(Butterfly.Db.IDatabase, System.String)
  type: Constructor
  source:
    remote:
      path: Butterfly.Db/Statements/DeleteStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: .ctor
    path: ../Butterfly.Db/Statements/DeleteStatement.cs
    startLine: 20
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public DeleteStatement(IDatabase database, string sql)
    parameters:
    - id: database
      type: Butterfly.Db.IDatabase
    - id: sql
      type: System.String
    content.vb: Public Sub New(database As IDatabase, sql As String)
  overload: Butterfly.Db.DeleteStatement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Db.DeleteStatement.GetWhereIndexAndWhereRefs(Butterfly.Db.IDatabase,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Butterfly.Db.DeleteStatement.GetWhereIndexAndWhereRefs(Butterfly.Db.IDatabase,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: GetWhereIndexAndWhereRefs(Butterfly.Db.IDatabase,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Butterfly.Db.DeleteStatement
  langs:
  - csharp
  - vb
  name: GetWhereIndexAndWhereRefs(IDatabase, System.Collections.Generic.Dictionary<String, Object>)
  nameWithType: DeleteStatement.GetWhereIndexAndWhereRefs(IDatabase, System.Collections.Generic.Dictionary<String, Object>)
  fullName: Butterfly.Db.DeleteStatement.GetWhereIndexAndWhereRefs(Butterfly.Db.IDatabase, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Statements/DeleteStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: GetWhereIndexAndWhereRefs
    path: ../Butterfly.Db/Statements/DeleteStatement.cs
    startLine: 42
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public (TableIndex, StatementEqualsRef[]) GetWhereIndexAndWhereRefs(IDatabase database, System.Collections.Generic.Dictionary<string, object> statementParams)
    parameters:
    - id: database
      type: Butterfly.Db.IDatabase
    - id: statementParams
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    return:
      type: System.ValueTuple{Butterfly.Db.TableIndex,Butterfly.Db.StatementEqualsRef[]}
    content.vb: Public Function GetWhereIndexAndWhereRefs(database As IDatabase, statementParams As System.Collections.Generic.Dictionary(Of String, Object)) As(TableIndex, StatementEqualsRef())
  overload: Butterfly.Db.DeleteStatement.GetWhereIndexAndWhereRefs*
  nameWithType.vb: DeleteStatement.GetWhereIndexAndWhereRefs(IDatabase, System.Collections.Generic.Dictionary(Of String, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Butterfly.Db.DeleteStatement.GetWhereIndexAndWhereRefs(Butterfly.Db.IDatabase, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: GetWhereIndexAndWhereRefs(IDatabase, System.Collections.Generic.Dictionary(Of String, Object))
- uid: Butterfly.Db.DeleteStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  commentId: M:Butterfly.Db.DeleteStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  id: GetExecutableSqlAndParams(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  parent: Butterfly.Db.DeleteStatement
  langs:
  - csharp
  - vb
  name: GetExecutableSqlAndParams(System.Collections.Generic.Dictionary<String, Object>, StatementEqualsRef[])
  nameWithType: DeleteStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary<String, Object>, StatementEqualsRef[])
  fullName: Butterfly.Db.DeleteStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary<System.String, System.Object>, Butterfly.Db.StatementEqualsRef[])
  type: Method
  source:
    remote:
      path: Butterfly.Db/Statements/DeleteStatement.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: GetExecutableSqlAndParams
    path: ../Butterfly.Db/Statements/DeleteStatement.cs
    startLine: 59
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db
  syntax:
    content: public (string, System.Collections.Generic.Dictionary<string, object>) GetExecutableSqlAndParams(System.Collections.Generic.Dictionary<string, object> sourceParams, StatementEqualsRef[] whereRefs)
    parameters:
    - id: sourceParams
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: whereRefs
      type: Butterfly.Db.StatementEqualsRef[]
    return:
      type: System.ValueTuple{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
    content.vb: Public Function GetExecutableSqlAndParams(sourceParams As System.Collections.Generic.Dictionary(Of String, Object), whereRefs As StatementEqualsRef()) As(String, System.Collections.Generic.Dictionary(Of String, Object))
  overload: Butterfly.Db.DeleteStatement.GetExecutableSqlAndParams*
  nameWithType.vb: DeleteStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary(Of String, Object), StatementEqualsRef())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Butterfly.Db.DeleteStatement.GetExecutableSqlAndParams(System.Collections.Generic.Dictionary(Of System.String, System.Object), Butterfly.Db.StatementEqualsRef())
  name.vb: GetExecutableSqlAndParams(System.Collections.Generic.Dictionary(Of String, Object), StatementEqualsRef())
references:
- uid: Butterfly.Db
  commentId: N:Butterfly.Db
  name: Butterfly.Db
  nameWithType: Butterfly.Db
  fullName: Butterfly.Db
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Butterfly.Db.BaseStatement
  commentId: T:Butterfly.Db.BaseStatement
  parent: Butterfly.Db
  name: BaseStatement
  nameWithType: BaseStatement
  fullName: Butterfly.Db.BaseStatement
- uid: Butterfly.Db.BaseStatement.IsSqlTableName
  commentId: P:Butterfly.Db.BaseStatement.IsSqlTableName
  parent: Butterfly.Db.BaseStatement
  name: IsSqlTableName
  nameWithType: BaseStatement.IsSqlTableName
  fullName: Butterfly.Db.BaseStatement.IsSqlTableName
- uid: Butterfly.Db.BaseStatement.Sql
  commentId: P:Butterfly.Db.BaseStatement.Sql
  parent: Butterfly.Db.BaseStatement
  name: Sql
  nameWithType: BaseStatement.Sql
  fullName: Butterfly.Db.BaseStatement.Sql
- uid: Butterfly.Db.BaseStatement.StatementFromRefs
  commentId: P:Butterfly.Db.BaseStatement.StatementFromRefs
  parent: Butterfly.Db.BaseStatement
  name: StatementFromRefs
  nameWithType: BaseStatement.StatementFromRefs
  fullName: Butterfly.Db.BaseStatement.StatementFromRefs
- uid: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  commentId: M:Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: FindStatementFromRefByTableAlias(String)
  nameWithType: BaseStatement.FindStatementFromRefByTableAlias(String)
  fullName: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
    name: FindStatementFromRefByTableAlias
    nameWithType: BaseStatement.FindStatementFromRefByTableAlias
    fullName: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias(System.String)
    name: FindStatementFromRefByTableAlias
    nameWithType: BaseStatement.FindStatementFromRefByTableAlias
    fullName: Butterfly.Db.BaseStatement.FindStatementFromRefByTableAlias
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseStatement.fromTableNames
  commentId: F:Butterfly.Db.BaseStatement.fromTableNames
  parent: Butterfly.Db.BaseStatement
  name: fromTableNames
  nameWithType: BaseStatement.fromTableNames
  fullName: Butterfly.Db.BaseStatement.fromTableNames
- uid: Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
  commentId: M:Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: HasTableInFrom(String)
  nameWithType: BaseStatement.HasTableInFrom(String)
  fullName: Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
    name: HasTableInFrom
    nameWithType: BaseStatement.HasTableInFrom
    fullName: Butterfly.Db.BaseStatement.HasTableInFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.HasTableInFrom(System.String)
    name: HasTableInFrom
    nameWithType: BaseStatement.HasTableInFrom
    fullName: Butterfly.Db.BaseStatement.HasTableInFrom
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary<String, Object>)
  nameWithType: BaseStatement.ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary<String, Object>)
  fullName: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  nameWithType.vb: BaseStatement.ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary(Of String, Object))
  fullName.vb: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: ConfirmAllParamsUsed(String, System.Collections.Generic.Dictionary(Of String, Object))
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
    name: ConfirmAllParamsUsed
    nameWithType: BaseStatement.ConfirmAllParamsUsed
    fullName: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
    name: ConfirmAllParamsUsed
    nameWithType: BaseStatement.ConfirmAllParamsUsed
    fullName: Butterfly.Db.BaseStatement.ConfirmAllParamsUsed
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  commentId: M:Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: ConvertParamsToDict(Object, Boolean)
  nameWithType: BaseStatement.ConvertParamsToDict(Object, Boolean)
  fullName: Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object, System.Boolean)
  nameWithType.vb: BaseStatement.ConvertParamsToDict(, Boolean)
  fullName.vb: Butterfly.Db.BaseStatement.ConvertParamsToDict(, System.Boolean)
  name.vb: ConvertParamsToDict(, Boolean)
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
    name: ConvertParamsToDict
    nameWithType: BaseStatement.ConvertParamsToDict
    fullName: Butterfly.Db.BaseStatement.ConvertParamsToDict
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.ConvertParamsToDict(System.Object,System.Boolean)
    name: ConvertParamsToDict
    nameWithType: BaseStatement.ConvertParamsToDict
    fullName: Butterfly.Db.BaseStatement.ConvertParamsToDict
  - name: (
    nameWithType: (
    fullName: (
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseStatement.EQUALS_REF_REGEX
  commentId: F:Butterfly.Db.BaseStatement.EQUALS_REF_REGEX
  parent: Butterfly.Db.BaseStatement
  name: EQUALS_REF_REGEX
  nameWithType: BaseStatement.EQUALS_REF_REGEX
  fullName: Butterfly.Db.BaseStatement.EQUALS_REF_REGEX
- uid: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  commentId: M:Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
  parent: Butterfly.Db.BaseStatement
  isExternal: true
  name: RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<String, Object>, StatementEqualsRef[])
  nameWithType: BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<String, Object>, StatementEqualsRef[])
  fullName: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary<System.String, System.Object>, Butterfly.Db.StatementEqualsRef[])
  nameWithType.vb: BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of String, Object), StatementEqualsRef())
  fullName.vb: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of System.String, System.Object), Butterfly.Db.StatementEqualsRef())
  name.vb: RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary(Of String, Object), StatementEqualsRef())
  spec.csharp:
  - uid: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
    name: RemapStatementParamsToFieldValues
    nameWithType: BaseStatement.RemapStatementParamsToFieldValues
    fullName: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Db.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Db.StatementEqualsRef
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementEqualsRef[])
    name: RemapStatementParamsToFieldValues
    nameWithType: BaseStatement.RemapStatementParamsToFieldValues
    fullName: Butterfly.Db.BaseStatement.RemapStatementParamsToFieldValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Db.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Db.StatementEqualsRef
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Regex
  isExternal: true
  name: Regex
  nameWithType: Regex
  fullName: Regex
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Butterfly.Db.DeleteStatement.#ctor*
  commentId: Overload:Butterfly.Db.DeleteStatement.#ctor
  name: DeleteStatement
  nameWithType: DeleteStatement.DeleteStatement
  fullName: Butterfly.Db.DeleteStatement.DeleteStatement
- uid: Butterfly.Db.IDatabase
  commentId: T:Butterfly.Db.IDatabase
  parent: Butterfly.Db
  name: IDatabase
  nameWithType: IDatabase
  fullName: Butterfly.Db.IDatabase
- uid: Butterfly.Db.DeleteStatement.GetWhereIndexAndWhereRefs*
  commentId: Overload:Butterfly.Db.DeleteStatement.GetWhereIndexAndWhereRefs
  name: GetWhereIndexAndWhereRefs
  nameWithType: DeleteStatement.GetWhereIndexAndWhereRefs
  fullName: Butterfly.Db.DeleteStatement.GetWhereIndexAndWhereRefs
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,System.Object}'
  definition: System.Collections.Generic.Dictionary`2
  name: System.Collections.Generic.Dictionary<String, Object>
  nameWithType: System.Collections.Generic.Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: System.Collections.Generic.Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: System.Collections.Generic.Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueTuple{Butterfly.Db.TableIndex,Butterfly.Db.StatementEqualsRef[]}
  commentId: T:System.ValueTuple{Butterfly.Db.TableIndex,Butterfly.Db.StatementEqualsRef[]}
  parent: System
  isExternal: true
  name: ValueTuple<TableIndex, StatementEqualsRef[]>
  nameWithType: ValueTuple<TableIndex, StatementEqualsRef[]>
  fullName: System.ValueTuple<Butterfly.Db.TableIndex, Butterfly.Db.StatementEqualsRef[]>
  nameWithType.vb: ValueTuple(Of TableIndex, StatementEqualsRef())
  fullName.vb: System.ValueTuple(Of Butterfly.Db.TableIndex, Butterfly.Db.StatementEqualsRef())
  name.vb: ValueTuple(Of TableIndex, StatementEqualsRef())
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.TableIndex
    name: TableIndex
    nameWithType: TableIndex
    fullName: Butterfly.Db.TableIndex
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Db.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Db.StatementEqualsRef
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.TableIndex
    name: TableIndex
    nameWithType: TableIndex
    fullName: Butterfly.Db.TableIndex
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Db.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Db.StatementEqualsRef
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  isExternal: true
  name: System.Collections.Generic.Dictionary<, >
  nameWithType: System.Collections.Generic.Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: System.Collections.Generic.Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: System.Collections.Generic.Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Butterfly.Db.DeleteStatement.GetExecutableSqlAndParams*
  commentId: Overload:Butterfly.Db.DeleteStatement.GetExecutableSqlAndParams
  name: GetExecutableSqlAndParams
  nameWithType: DeleteStatement.GetExecutableSqlAndParams
  fullName: Butterfly.Db.DeleteStatement.GetExecutableSqlAndParams
- uid: Butterfly.Db.StatementEqualsRef[]
  isExternal: true
  name: StatementEqualsRef[]
  nameWithType: StatementEqualsRef[]
  fullName: Butterfly.Db.StatementEqualsRef[]
  nameWithType.vb: StatementEqualsRef()
  fullName.vb: Butterfly.Db.StatementEqualsRef()
  name.vb: StatementEqualsRef()
  spec.csharp:
  - uid: Butterfly.Db.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Db.StatementEqualsRef
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Butterfly.Db.StatementEqualsRef
    name: StatementEqualsRef
    nameWithType: StatementEqualsRef
    fullName: Butterfly.Db.StatementEqualsRef
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.ValueTuple{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
  commentId: T:System.ValueTuple{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
  parent: System
  isExternal: true
  name: ValueTuple<String, System.Collections.Generic.Dictionary<String, Object>>
  nameWithType: ValueTuple<String, System.Collections.Generic.Dictionary<String, Object>>
  fullName: System.ValueTuple<System.String, System.Collections.Generic.Dictionary<System.String, System.Object>>
  nameWithType.vb: ValueTuple(Of String, System.Collections.Generic.Dictionary(Of String, Object))
  fullName.vb: System.ValueTuple(Of System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: ValueTuple(Of String, System.Collections.Generic.Dictionary(Of String, Object))
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
