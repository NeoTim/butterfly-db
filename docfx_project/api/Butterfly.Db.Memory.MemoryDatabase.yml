### YamlMime:ManagedReference
items:
- uid: Butterfly.Db.Memory.MemoryDatabase
  commentId: T:Butterfly.Db.Memory.MemoryDatabase
  id: MemoryDatabase
  parent: Butterfly.Db.Memory
  children:
  - Butterfly.Db.Memory.MemoryDatabase.#ctor
  - Butterfly.Db.Memory.MemoryDatabase.CanFieldAlias
  - Butterfly.Db.Memory.MemoryDatabase.CanJoin
  - Butterfly.Db.Memory.MemoryDatabase.CreateFromResourceFileAsync(Assembly,System.String)
  - Butterfly.Db.Memory.MemoryDatabase.CreateFromSqlAsync(System.String)
  - Butterfly.Db.Memory.MemoryDatabase.CreateStatement(System.String)
  - Butterfly.Db.Memory.MemoryDatabase.CreateTransaction
  - Butterfly.Db.Memory.MemoryDatabase.DoQueryRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  - Butterfly.Db.Memory.MemoryDatabase.DoSelectRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)
  - Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClause(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementFromRef[])
  - Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClauseReplace(System.String,Regex,System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementFromRef[],Func{System.String,System.String})
  - Butterfly.Db.Memory.MemoryDatabase.IN_REPLACE
  - Butterfly.Db.Memory.MemoryDatabase.LoadSchemaAsync
  - Butterfly.Db.Memory.MemoryDatabase.LoadTableSchemaAsync(System.String)
  - Butterfly.Db.Memory.MemoryDatabase.SIMPLE_REPLACE
  langs:
  - csharp
  - vb
  name: MemoryDatabase
  nameWithType: MemoryDatabase
  fullName: Butterfly.Db.Memory.MemoryDatabase
  type: Class
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: MemoryDatabase
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 20
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  summary: "\nBase class implementing <xref href=\"Butterfly.Db.IDatabase\" data-throw-if-not-resolved=\"false\"></xref>. New implementations will normally extend this class.\n"
  example: []
  syntax:
    content: 'public class MemoryDatabase : BaseDatabase, IDatabase'
    content.vb: >-
      Public Class MemoryDatabase
          Inherits BaseDatabase
          Implements IDatabase
  inheritance:
  - System.Object
  - Butterfly.Db.BaseDatabase
  implements:
  - Butterfly.Db.IDatabase
  inheritedMembers:
  - Butterfly.Db.BaseDatabase.tableByName
  - Butterfly.Db.BaseDatabase.SQL_COMMENT
  - Butterfly.Db.BaseDatabase.ConnectionString
  - Butterfly.Db.BaseDatabase.TableByName
  - Butterfly.Db.BaseDatabase.SelectCount
  - Butterfly.Db.BaseDatabase.TransactionCount
  - Butterfly.Db.BaseDatabase.InsertCount
  - Butterfly.Db.BaseDatabase.UpdateCount
  - Butterfly.Db.BaseDatabase.DeleteCount
  - Butterfly.Db.BaseDatabase.uncommittedTransactionListeners
  - Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Action{Butterfly.Db.Event.DataEventTransaction})
  - Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Func{Butterfly.Db.Event.DataEventTransaction,Task})
  - Butterfly.Db.BaseDatabase.committedTransactionListeners
  - Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Action{Butterfly.Db.Event.DataEventTransaction})
  - Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Func{Butterfly.Db.Event.DataEventTransaction,Task})
  - Butterfly.Db.BaseDatabase.GetInitialDataEventsAsync(System.String,System.String[],Butterfly.Db.SelectStatement,System.Object)
  - Butterfly.Db.BaseDatabase.SelectValueAsync``1(System.String,System.Object,{T})
  - Butterfly.Db.BaseDatabase.SelectValuesAsync``1(System.String,System.Object)
  - Butterfly.Db.BaseDatabase.SelectRowAsync(System.String,System.Object)
  - Butterfly.Db.BaseDatabase.SelectRowsAsync(System.String,System.Object)
  - Butterfly.Db.BaseDatabase.SelectRowsAsync(Butterfly.Db.SelectStatement,System.Object)
  - Butterfly.Db.BaseDatabase.QueryValueAsync``1(System.String,System.Object,{T})
  - Butterfly.Db.BaseDatabase.QueryRowAsync(System.String,System.Object)
  - Butterfly.Db.BaseDatabase.QueryRowsAsync(System.String,System.Object)
  - Butterfly.Db.BaseDatabase.InsertAndCommitAsync``1(System.String,System.Object,System.Boolean)
  - Butterfly.Db.BaseDatabase.UpdateAndCommitAsync(System.String,System.Object)
  - Butterfly.Db.BaseDatabase.DeleteAndCommitAsync(System.String,System.Object)
  - Butterfly.Db.BaseDatabase.BeginTransaction
  - Butterfly.Db.BaseDatabase.BeginTransactionAsync
  - Butterfly.Db.BaseDatabase.getDefaultValueByFieldName
  - Butterfly.Db.BaseDatabase.SetDefaultValue(System.String,Func{System.String,System.Object},System.String)
  - Butterfly.Db.BaseDatabase.getOverrideValueByFieldName
  - Butterfly.Db.BaseDatabase.SetOverrideValue(System.String,Func{System.String,System.Object},System.String)
  - Butterfly.Db.BaseDatabase.inputPreprocessors
  - Butterfly.Db.BaseDatabase.AddInputPreprocessor(Action{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}})
  - Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor``1(Func{{T},System.Object})
  - Butterfly.Db.BaseDatabase.CopyFieldValueInputPreprocessor(System.String,System.String)
  - Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Action{Butterfly.Db.Event.DataEventTransaction})
  - Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Func{Butterfly.Db.Event.DataEventTransaction,Task})
  - Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String,Action{Butterfly.Db.Event.DataEventTransaction},System.Object,System.String,System.String[])
  - Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String,Func{Butterfly.Db.Event.DataEventTransaction,Task},System.Object,System.String,System.String[])
  - Butterfly.Db.BaseDatabase.foreignKeys
  - Butterfly.Db.BaseDatabase.RegisterForeignKey(System.String,System.String,System.String,System.String,Butterfly.Db.ForeignKeyRule[])
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Butterfly.Db.Memory.MemoryDatabase.#ctor
  commentId: M:Butterfly.Db.Memory.MemoryDatabase.#ctor
  id: '#ctor'
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: MemoryDatabase()
  nameWithType: MemoryDatabase.MemoryDatabase()
  fullName: Butterfly.Db.Memory.MemoryDatabase.MemoryDatabase()
  type: Constructor
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: .ctor
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 24
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: public MemoryDatabase()
    content.vb: Public Sub New
  overload: Butterfly.Db.Memory.MemoryDatabase.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Db.Memory.MemoryDatabase.CreateFromResourceFileAsync(Assembly,System.String)
  commentId: M:Butterfly.Db.Memory.MemoryDatabase.CreateFromResourceFileAsync(Assembly,System.String)
  id: CreateFromResourceFileAsync(Assembly,System.String)
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: CreateFromResourceFileAsync(Assembly, String)
  nameWithType: MemoryDatabase.CreateFromResourceFileAsync(Assembly, String)
  fullName: Butterfly.Db.Memory.MemoryDatabase.CreateFromResourceFileAsync(Assembly, System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: CreateFromResourceFileAsync
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 33
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  summary: "\nCreates database tables from an embedded resource file by internally calling <xref href=\"Butterfly.Db.Memory.MemoryDatabase.CreateFromSqlAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> with the contents of the embedded resource file&quot;\n"
  example: []
  syntax:
    content: public Task CreateFromResourceFileAsync(Assembly assembly, string resourceFile)
    parameters:
    - id: assembly
      type: Assembly
      description: ''
    - id: resourceFile
      type: System.String
      description: ''
    return:
      type: Task
      description: ''
    content.vb: Public Function CreateFromResourceFileAsync(assembly As Assembly, resourceFile As String) As Task
  overload: Butterfly.Db.Memory.MemoryDatabase.CreateFromResourceFileAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Db.Memory.MemoryDatabase.CreateFromSqlAsync(System.String)
  commentId: M:Butterfly.Db.Memory.MemoryDatabase.CreateFromSqlAsync(System.String)
  id: CreateFromSqlAsync(System.String)
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: CreateFromSqlAsync(String)
  nameWithType: MemoryDatabase.CreateFromSqlAsync(String)
  fullName: Butterfly.Db.Memory.MemoryDatabase.CreateFromSqlAsync(System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: CreateFromSqlAsync
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 45
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  summary: "\nCreates database tables from a string containing a semicolon delimited series of CREATE statements in MySQL format (will be converted to native database format as appropriate).<p></p>\nLines beginning with <pre><code>--</code></pre> will be ignored. Each CREATE statement must include a PRIMARY KEY definition. If the table already exists, the CREATE statement is ignored.<p></p>\nCreating database tables with this method is not required (primarily done as a convenience method for unit testing)&quot;/>.\n"
  example: []
  syntax:
    content: public Task CreateFromSqlAsync(string createStatements)
    parameters:
    - id: createStatements
      type: System.String
    return:
      type: Task
    content.vb: Public Function CreateFromSqlAsync(createStatements As String) As Task
  overload: Butterfly.Db.Memory.MemoryDatabase.CreateFromSqlAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Db.Memory.MemoryDatabase.CreateStatement(System.String)
  commentId: M:Butterfly.Db.Memory.MemoryDatabase.CreateStatement(System.String)
  id: CreateStatement(System.String)
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: CreateStatement(String)
  nameWithType: MemoryDatabase.CreateStatement(String)
  fullName: Butterfly.Db.Memory.MemoryDatabase.CreateStatement(System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: CreateStatement
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 72
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: protected virtual CreateStatement CreateStatement(string sql)
    parameters:
    - id: sql
      type: System.String
    return:
      type: Butterfly.Db.CreateStatement
    content.vb: Protected Overridable Function CreateStatement(sql As String) As CreateStatement
  overload: Butterfly.Db.Memory.MemoryDatabase.CreateStatement*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Butterfly.Db.Memory.MemoryDatabase.LoadSchemaAsync
  commentId: M:Butterfly.Db.Memory.MemoryDatabase.LoadSchemaAsync
  id: LoadSchemaAsync
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: LoadSchemaAsync()
  nameWithType: MemoryDatabase.LoadSchemaAsync()
  fullName: Butterfly.Db.Memory.MemoryDatabase.LoadSchemaAsync()
  type: Method
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: LoadSchemaAsync
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 76
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: protected override Task LoadSchemaAsync()
    return:
      type: Task
    content.vb: Protected Overrides Function LoadSchemaAsync As Task
  overridden: Butterfly.Db.BaseDatabase.LoadSchemaAsync
  overload: Butterfly.Db.Memory.MemoryDatabase.LoadSchemaAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Butterfly.Db.Memory.MemoryDatabase.LoadTableSchemaAsync(System.String)
  commentId: M:Butterfly.Db.Memory.MemoryDatabase.LoadTableSchemaAsync(System.String)
  id: LoadTableSchemaAsync(System.String)
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: LoadTableSchemaAsync(String)
  nameWithType: MemoryDatabase.LoadTableSchemaAsync(String)
  fullName: Butterfly.Db.Memory.MemoryDatabase.LoadTableSchemaAsync(System.String)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: LoadTableSchemaAsync
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 80
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: protected override Task<Table> LoadTableSchemaAsync(string tableName)
    parameters:
    - id: tableName
      type: System.String
    return:
      type: Task{Butterfly.Db.Table}
    content.vb: Protected Overrides Function LoadTableSchemaAsync(tableName As String) As Task(Of Table)
  overridden: Butterfly.Db.BaseDatabase.LoadTableSchemaAsync(System.String)
  overload: Butterfly.Db.Memory.MemoryDatabase.LoadTableSchemaAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Butterfly.Db.Memory.MemoryDatabase.CreateTransaction
  commentId: M:Butterfly.Db.Memory.MemoryDatabase.CreateTransaction
  id: CreateTransaction
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: CreateTransaction()
  nameWithType: MemoryDatabase.CreateTransaction()
  fullName: Butterfly.Db.Memory.MemoryDatabase.CreateTransaction()
  type: Method
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: CreateTransaction
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 84
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: protected override BaseTransaction CreateTransaction()
    return:
      type: Butterfly.Db.BaseTransaction
    content.vb: Protected Overrides Function CreateTransaction As BaseTransaction
  overridden: Butterfly.Db.BaseDatabase.CreateTransaction
  overload: Butterfly.Db.Memory.MemoryDatabase.CreateTransaction*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Butterfly.Db.Memory.MemoryDatabase.DoSelectRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)
  commentId: M:Butterfly.Db.Memory.MemoryDatabase.DoSelectRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)
  id: DoSelectRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: DoSelectRowsAsync(String, System.Collections.Generic.Dictionary<String, Object>, Int32)
  nameWithType: MemoryDatabase.DoSelectRowsAsync(String, System.Collections.Generic.Dictionary<String, Object>, Int32)
  fullName: Butterfly.Db.Memory.MemoryDatabase.DoSelectRowsAsync(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, System.Int32)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: DoSelectRowsAsync
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 88
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: protected override Task<System.Collections.Generic.Dictionary<string, object>[]> DoSelectRowsAsync(string executableSql, System.Collections.Generic.Dictionary<string, object> executableParams, int limit)
    parameters:
    - id: executableSql
      type: System.String
    - id: executableParams
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: limit
      type: System.Int32
    return:
      type: Task{System.Collections.Generic.Dictionary{System.String,System.Object}[]}
    content.vb: Protected Overrides Function DoSelectRowsAsync(executableSql As String, executableParams As System.Collections.Generic.Dictionary(Of String, Object), limit As Integer) As Task(Of System.Collections.Generic.Dictionary(Of String, Object)())
  overridden: Butterfly.Db.BaseDatabase.DoSelectRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)
  overload: Butterfly.Db.Memory.MemoryDatabase.DoSelectRowsAsync*
  nameWithType.vb: MemoryDatabase.DoSelectRowsAsync(String, System.Collections.Generic.Dictionary(Of String, Object), Int32)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Butterfly.Db.Memory.MemoryDatabase.DoSelectRowsAsync(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), System.Int32)
  name.vb: DoSelectRowsAsync(String, System.Collections.Generic.Dictionary(Of String, Object), Int32)
- uid: Butterfly.Db.Memory.MemoryDatabase.DoQueryRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Butterfly.Db.Memory.MemoryDatabase.DoQueryRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  id: DoQueryRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: DoQueryRowsAsync(String, System.Collections.Generic.Dictionary<String, Object>)
  nameWithType: MemoryDatabase.DoQueryRowsAsync(String, System.Collections.Generic.Dictionary<String, Object>)
  fullName: Butterfly.Db.Memory.MemoryDatabase.DoQueryRowsAsync(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: DoQueryRowsAsync
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 110
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: protected override Task<System.Collections.Generic.Dictionary<string, object>[]> DoQueryRowsAsync(string storedProcedureName, System.Collections.Generic.Dictionary<string, object> vars = null)
    parameters:
    - id: storedProcedureName
      type: System.String
    - id: vars
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    return:
      type: Task{System.Collections.Generic.Dictionary{System.String,System.Object}[]}
    content.vb: Protected Overrides Function DoQueryRowsAsync(storedProcedureName As String, vars As System.Collections.Generic.Dictionary(Of String, Object) = Nothing) As Task(Of System.Collections.Generic.Dictionary(Of String, Object)())
  overridden: Butterfly.Db.BaseDatabase.DoQueryRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  overload: Butterfly.Db.Memory.MemoryDatabase.DoQueryRowsAsync*
  nameWithType.vb: MemoryDatabase.DoQueryRowsAsync(String, System.Collections.Generic.Dictionary(Of String, Object))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Butterfly.Db.Memory.MemoryDatabase.DoQueryRowsAsync(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: DoQueryRowsAsync(String, System.Collections.Generic.Dictionary(Of String, Object))
- uid: Butterfly.Db.Memory.MemoryDatabase.SIMPLE_REPLACE
  commentId: F:Butterfly.Db.Memory.MemoryDatabase.SIMPLE_REPLACE
  id: SIMPLE_REPLACE
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: SIMPLE_REPLACE
  nameWithType: MemoryDatabase.SIMPLE_REPLACE
  fullName: Butterfly.Db.Memory.MemoryDatabase.SIMPLE_REPLACE
  type: Field
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: SIMPLE_REPLACE
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 114
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: protected static readonly Regex SIMPLE_REPLACE
    return:
      type: Regex
    content.vb: Protected Shared ReadOnly SIMPLE_REPLACE As Regex
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Butterfly.Db.Memory.MemoryDatabase.IN_REPLACE
  commentId: F:Butterfly.Db.Memory.MemoryDatabase.IN_REPLACE
  id: IN_REPLACE
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: IN_REPLACE
  nameWithType: MemoryDatabase.IN_REPLACE
  fullName: Butterfly.Db.Memory.MemoryDatabase.IN_REPLACE
  type: Field
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: IN_REPLACE
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 115
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: protected static readonly Regex IN_REPLACE
    return:
      type: Regex
    content.vb: Protected Shared ReadOnly IN_REPLACE As Regex
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Butterfly.Db.Memory.MemoryDatabase.CanJoin
  commentId: P:Butterfly.Db.Memory.MemoryDatabase.CanJoin
  id: CanJoin
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: CanJoin
  nameWithType: MemoryDatabase.CanJoin
  fullName: Butterfly.Db.Memory.MemoryDatabase.CanJoin
  type: Property
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: CanJoin
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 117
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: public override bool CanJoin { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanJoin As Boolean
  overridden: Butterfly.Db.BaseDatabase.CanJoin
  overload: Butterfly.Db.Memory.MemoryDatabase.CanJoin*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Butterfly.Db.Memory.MemoryDatabase.CanFieldAlias
  commentId: P:Butterfly.Db.Memory.MemoryDatabase.CanFieldAlias
  id: CanFieldAlias
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: CanFieldAlias
  nameWithType: MemoryDatabase.CanFieldAlias
  fullName: Butterfly.Db.Memory.MemoryDatabase.CanFieldAlias
  type: Property
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: CanFieldAlias
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 118
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: public override bool CanFieldAlias { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanFieldAlias As Boolean
  overridden: Butterfly.Db.BaseDatabase.CanFieldAlias
  overload: Butterfly.Db.Memory.MemoryDatabase.CanFieldAlias*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClause(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementFromRef[])
  commentId: M:Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClause(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementFromRef[])
  id: EvaluateWhereClause(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementFromRef[])
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: EvaluateWhereClause(String, System.Collections.Generic.Dictionary<String, Object>, StatementFromRef[])
  nameWithType: MemoryDatabase.EvaluateWhereClause(String, System.Collections.Generic.Dictionary<String, Object>, StatementFromRef[])
  fullName: Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClause(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, Butterfly.Db.StatementFromRef[])
  type: Method
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: EvaluateWhereClause
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 120
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: public static string EvaluateWhereClause(string whereClause, System.Collections.Generic.Dictionary<string, object> sqlParams, StatementFromRef[] tableRefs)
    parameters:
    - id: whereClause
      type: System.String
    - id: sqlParams
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: tableRefs
      type: Butterfly.Db.StatementFromRef[]
    return:
      type: System.String
    content.vb: Public Shared Function EvaluateWhereClause(whereClause As String, sqlParams As System.Collections.Generic.Dictionary(Of String, Object), tableRefs As StatementFromRef()) As String
  overload: Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClause*
  nameWithType.vb: MemoryDatabase.EvaluateWhereClause(String, System.Collections.Generic.Dictionary(Of String, Object), StatementFromRef())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClause(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), Butterfly.Db.StatementFromRef())
  name.vb: EvaluateWhereClause(String, System.Collections.Generic.Dictionary(Of String, Object), StatementFromRef())
- uid: Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClauseReplace(System.String,Regex,System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementFromRef[],Func{System.String,System.String})
  commentId: M:Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClauseReplace(System.String,Regex,System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementFromRef[],Func{System.String,System.String})
  id: EvaluateWhereClauseReplace(System.String,Regex,System.Collections.Generic.Dictionary{System.String,System.Object},Butterfly.Db.StatementFromRef[],Func{System.String,System.String})
  parent: Butterfly.Db.Memory.MemoryDatabase
  langs:
  - csharp
  - vb
  name: EvaluateWhereClauseReplace(String, Regex, System.Collections.Generic.Dictionary<String, Object>, StatementFromRef[], Func<String, String>)
  nameWithType: MemoryDatabase.EvaluateWhereClauseReplace(String, Regex, System.Collections.Generic.Dictionary<String, Object>, StatementFromRef[], Func<String, String>)
  fullName: Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClauseReplace(System.String, Regex, System.Collections.Generic.Dictionary<System.String, System.Object>, Butterfly.Db.StatementFromRef[], Func<System.String, System.String>)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Memory/MemoryDatabase.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db
    id: EvaluateWhereClauseReplace
    path: ../Butterfly.Db/Memory/MemoryDatabase.cs
    startLine: 130
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Memory
  syntax:
    content: protected static string EvaluateWhereClauseReplace(string sql, Regex regex, System.Collections.Generic.Dictionary<string, object> sqlParams, StatementFromRef[] tableRefs, Func<string, string> remapOp = null)
    parameters:
    - id: sql
      type: System.String
    - id: regex
      type: Regex
    - id: sqlParams
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: tableRefs
      type: Butterfly.Db.StatementFromRef[]
    - id: remapOp
      type: Func{System.String,System.String}
    return:
      type: System.String
    content.vb: Protected Shared Function EvaluateWhereClauseReplace(sql As String, regex As Regex, sqlParams As System.Collections.Generic.Dictionary(Of String, Object), tableRefs As StatementFromRef(), remapOp As Func(Of String, String) = Nothing) As String
  overload: Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClauseReplace*
  nameWithType.vb: MemoryDatabase.EvaluateWhereClauseReplace(String, Regex, System.Collections.Generic.Dictionary(Of String, Object), StatementFromRef(), Func(Of String, String))
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
  fullName.vb: Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClauseReplace(System.String, Regex, System.Collections.Generic.Dictionary(Of System.String, System.Object), Butterfly.Db.StatementFromRef(), Func(Of System.String, System.String))
  name.vb: EvaluateWhereClauseReplace(String, Regex, System.Collections.Generic.Dictionary(Of String, Object), StatementFromRef(), Func(Of String, String))
references:
- uid: Butterfly.Db.Memory
  commentId: N:Butterfly.Db.Memory
  name: Butterfly.Db.Memory
  nameWithType: Butterfly.Db.Memory
  fullName: Butterfly.Db.Memory
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Butterfly.Db.BaseDatabase
  commentId: T:Butterfly.Db.BaseDatabase
  parent: Butterfly.Db
  name: BaseDatabase
  nameWithType: BaseDatabase
  fullName: Butterfly.Db.BaseDatabase
- uid: Butterfly.Db.IDatabase
  commentId: T:Butterfly.Db.IDatabase
  parent: Butterfly.Db
  name: IDatabase
  nameWithType: IDatabase
  fullName: Butterfly.Db.IDatabase
- uid: Butterfly.Db.BaseDatabase.tableByName
  commentId: F:Butterfly.Db.BaseDatabase.tableByName
  parent: Butterfly.Db.BaseDatabase
  name: tableByName
  nameWithType: BaseDatabase.tableByName
  fullName: Butterfly.Db.BaseDatabase.tableByName
- uid: Butterfly.Db.BaseDatabase.SQL_COMMENT
  commentId: F:Butterfly.Db.BaseDatabase.SQL_COMMENT
  parent: Butterfly.Db.BaseDatabase
  name: SQL_COMMENT
  nameWithType: BaseDatabase.SQL_COMMENT
  fullName: Butterfly.Db.BaseDatabase.SQL_COMMENT
- uid: Butterfly.Db.BaseDatabase.ConnectionString
  commentId: P:Butterfly.Db.BaseDatabase.ConnectionString
  parent: Butterfly.Db.BaseDatabase
  name: ConnectionString
  nameWithType: BaseDatabase.ConnectionString
  fullName: Butterfly.Db.BaseDatabase.ConnectionString
- uid: Butterfly.Db.BaseDatabase.TableByName
  commentId: P:Butterfly.Db.BaseDatabase.TableByName
  parent: Butterfly.Db.BaseDatabase
  name: TableByName
  nameWithType: BaseDatabase.TableByName
  fullName: Butterfly.Db.BaseDatabase.TableByName
- uid: Butterfly.Db.BaseDatabase.SelectCount
  commentId: P:Butterfly.Db.BaseDatabase.SelectCount
  parent: Butterfly.Db.BaseDatabase
  name: SelectCount
  nameWithType: BaseDatabase.SelectCount
  fullName: Butterfly.Db.BaseDatabase.SelectCount
- uid: Butterfly.Db.BaseDatabase.TransactionCount
  commentId: P:Butterfly.Db.BaseDatabase.TransactionCount
  parent: Butterfly.Db.BaseDatabase
  name: TransactionCount
  nameWithType: BaseDatabase.TransactionCount
  fullName: Butterfly.Db.BaseDatabase.TransactionCount
- uid: Butterfly.Db.BaseDatabase.InsertCount
  commentId: P:Butterfly.Db.BaseDatabase.InsertCount
  parent: Butterfly.Db.BaseDatabase
  name: InsertCount
  nameWithType: BaseDatabase.InsertCount
  fullName: Butterfly.Db.BaseDatabase.InsertCount
- uid: Butterfly.Db.BaseDatabase.UpdateCount
  commentId: P:Butterfly.Db.BaseDatabase.UpdateCount
  parent: Butterfly.Db.BaseDatabase
  name: UpdateCount
  nameWithType: BaseDatabase.UpdateCount
  fullName: Butterfly.Db.BaseDatabase.UpdateCount
- uid: Butterfly.Db.BaseDatabase.DeleteCount
  commentId: P:Butterfly.Db.BaseDatabase.DeleteCount
  parent: Butterfly.Db.BaseDatabase
  name: DeleteCount
  nameWithType: BaseDatabase.DeleteCount
  fullName: Butterfly.Db.BaseDatabase.DeleteCount
- uid: Butterfly.Db.BaseDatabase.uncommittedTransactionListeners
  commentId: F:Butterfly.Db.BaseDatabase.uncommittedTransactionListeners
  parent: Butterfly.Db.BaseDatabase
  name: uncommittedTransactionListeners
  nameWithType: BaseDatabase.uncommittedTransactionListeners
  fullName: Butterfly.Db.BaseDatabase.uncommittedTransactionListeners
- uid: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Action{Butterfly.Db.Event.DataEventTransaction})
  commentId: M:Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Action{Butterfly.Db.Event.DataEventTransaction})
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: OnNewUncommittedTransaction(Action<DataEventTransaction>)
  nameWithType: BaseDatabase.OnNewUncommittedTransaction(Action<DataEventTransaction>)
  fullName: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Action<Butterfly.Db.Event.DataEventTransaction>)
  nameWithType.vb: BaseDatabase.OnNewUncommittedTransaction(Action(Of DataEventTransaction))
  fullName.vb: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Action(Of Butterfly.Db.Event.DataEventTransaction))
  name.vb: OnNewUncommittedTransaction(Action(Of DataEventTransaction))
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Action{Butterfly.Db.Event.DataEventTransaction})
    name: OnNewUncommittedTransaction
    nameWithType: BaseDatabase.OnNewUncommittedTransaction
    fullName: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Action{Butterfly.Db.Event.DataEventTransaction})
    name: OnNewUncommittedTransaction
    nameWithType: BaseDatabase.OnNewUncommittedTransaction
    fullName: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Func{Butterfly.Db.Event.DataEventTransaction,Task})
  commentId: M:Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Func{Butterfly.Db.Event.DataEventTransaction,Task})
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: OnNewUncommittedTransaction(Func<DataEventTransaction, Task>)
  nameWithType: BaseDatabase.OnNewUncommittedTransaction(Func<DataEventTransaction, Task>)
  fullName: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Func<Butterfly.Db.Event.DataEventTransaction, Task>)
  nameWithType.vb: BaseDatabase.OnNewUncommittedTransaction(Func(Of DataEventTransaction, Task))
  fullName.vb: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Func(Of Butterfly.Db.Event.DataEventTransaction, Task))
  name.vb: OnNewUncommittedTransaction(Func(Of DataEventTransaction, Task))
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Func{Butterfly.Db.Event.DataEventTransaction,Task})
    name: OnNewUncommittedTransaction
    nameWithType: BaseDatabase.OnNewUncommittedTransaction
    fullName: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction(Func{Butterfly.Db.Event.DataEventTransaction,Task})
    name: OnNewUncommittedTransaction
    nameWithType: BaseDatabase.OnNewUncommittedTransaction
    fullName: Butterfly.Db.BaseDatabase.OnNewUncommittedTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.committedTransactionListeners
  commentId: F:Butterfly.Db.BaseDatabase.committedTransactionListeners
  parent: Butterfly.Db.BaseDatabase
  name: committedTransactionListeners
  nameWithType: BaseDatabase.committedTransactionListeners
  fullName: Butterfly.Db.BaseDatabase.committedTransactionListeners
- uid: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Action{Butterfly.Db.Event.DataEventTransaction})
  commentId: M:Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Action{Butterfly.Db.Event.DataEventTransaction})
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: OnNewCommittedTransaction(Action<DataEventTransaction>)
  nameWithType: BaseDatabase.OnNewCommittedTransaction(Action<DataEventTransaction>)
  fullName: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Action<Butterfly.Db.Event.DataEventTransaction>)
  nameWithType.vb: BaseDatabase.OnNewCommittedTransaction(Action(Of DataEventTransaction))
  fullName.vb: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Action(Of Butterfly.Db.Event.DataEventTransaction))
  name.vb: OnNewCommittedTransaction(Action(Of DataEventTransaction))
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Action{Butterfly.Db.Event.DataEventTransaction})
    name: OnNewCommittedTransaction
    nameWithType: BaseDatabase.OnNewCommittedTransaction
    fullName: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Action{Butterfly.Db.Event.DataEventTransaction})
    name: OnNewCommittedTransaction
    nameWithType: BaseDatabase.OnNewCommittedTransaction
    fullName: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Func{Butterfly.Db.Event.DataEventTransaction,Task})
  commentId: M:Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Func{Butterfly.Db.Event.DataEventTransaction,Task})
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: OnNewCommittedTransaction(Func<DataEventTransaction, Task>)
  nameWithType: BaseDatabase.OnNewCommittedTransaction(Func<DataEventTransaction, Task>)
  fullName: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Func<Butterfly.Db.Event.DataEventTransaction, Task>)
  nameWithType.vb: BaseDatabase.OnNewCommittedTransaction(Func(Of DataEventTransaction, Task))
  fullName.vb: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Func(Of Butterfly.Db.Event.DataEventTransaction, Task))
  name.vb: OnNewCommittedTransaction(Func(Of DataEventTransaction, Task))
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Func{Butterfly.Db.Event.DataEventTransaction,Task})
    name: OnNewCommittedTransaction
    nameWithType: BaseDatabase.OnNewCommittedTransaction
    fullName: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction(Func{Butterfly.Db.Event.DataEventTransaction,Task})
    name: OnNewCommittedTransaction
    nameWithType: BaseDatabase.OnNewCommittedTransaction
    fullName: Butterfly.Db.BaseDatabase.OnNewCommittedTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.GetInitialDataEventsAsync(System.String,System.String[],Butterfly.Db.SelectStatement,System.Object)
  commentId: M:Butterfly.Db.BaseDatabase.GetInitialDataEventsAsync(System.String,System.String[],Butterfly.Db.SelectStatement,System.Object)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: GetInitialDataEventsAsync(String, String[], SelectStatement, Object)
  nameWithType: BaseDatabase.GetInitialDataEventsAsync(String, String[], SelectStatement, Object)
  fullName: Butterfly.Db.BaseDatabase.GetInitialDataEventsAsync(System.String, System.String[], Butterfly.Db.SelectStatement, System.Object)
  nameWithType.vb: BaseDatabase.GetInitialDataEventsAsync(String, String(), SelectStatement, )
  fullName.vb: Butterfly.Db.BaseDatabase.GetInitialDataEventsAsync(System.String, System.String(), Butterfly.Db.SelectStatement, )
  name.vb: GetInitialDataEventsAsync(String, String(), SelectStatement, )
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.GetInitialDataEventsAsync(System.String,System.String[],Butterfly.Db.SelectStatement,System.Object)
    name: GetInitialDataEventsAsync
    nameWithType: BaseDatabase.GetInitialDataEventsAsync
    fullName: Butterfly.Db.BaseDatabase.GetInitialDataEventsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Db.SelectStatement
    name: SelectStatement
    nameWithType: SelectStatement
    fullName: Butterfly.Db.SelectStatement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.GetInitialDataEventsAsync(System.String,System.String[],Butterfly.Db.SelectStatement,System.Object)
    name: GetInitialDataEventsAsync
    nameWithType: BaseDatabase.GetInitialDataEventsAsync
    fullName: Butterfly.Db.BaseDatabase.GetInitialDataEventsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Db.SelectStatement
    name: SelectStatement
    nameWithType: SelectStatement
    fullName: Butterfly.Db.SelectStatement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.SelectValueAsync``1(System.String,System.Object,{T})
  commentId: M:Butterfly.Db.BaseDatabase.SelectValueAsync``1(System.String,System.Object,``0)
  parent: Butterfly.Db.BaseDatabase
  definition: Butterfly.Db.BaseDatabase.SelectValueAsync``1(System.String,System.Object,``0)
  name: SelectValueAsync<T>(String, Object, T)
  nameWithType: BaseDatabase.SelectValueAsync<T>(String, Object, T)
  fullName: Butterfly.Db.BaseDatabase.SelectValueAsync<T>(System.String, System.Object, T)
  nameWithType.vb: BaseDatabase.SelectValueAsync(Of T)(String, , T)
  fullName.vb: Butterfly.Db.BaseDatabase.SelectValueAsync(Of T)(System.String, , T)
  name.vb: SelectValueAsync(Of T)(String, , T)
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.SelectValueAsync``1(System.String,System.Object,``0)
    name: SelectValueAsync<T>
    nameWithType: BaseDatabase.SelectValueAsync<T>
    fullName: Butterfly.Db.BaseDatabase.SelectValueAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.SelectValueAsync``1(System.String,System.Object,``0)
    name: SelectValueAsync(Of T)
    nameWithType: BaseDatabase.SelectValueAsync(Of T)
    fullName: Butterfly.Db.BaseDatabase.SelectValueAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.SelectValuesAsync``1(System.String,System.Object)
  commentId: M:Butterfly.Db.BaseDatabase.SelectValuesAsync``1(System.String,System.Object)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: SelectValuesAsync<T>(String, Object)
  nameWithType: BaseDatabase.SelectValuesAsync<T>(String, Object)
  fullName: Butterfly.Db.BaseDatabase.SelectValuesAsync<T>(System.String, System.Object)
  nameWithType.vb: BaseDatabase.SelectValuesAsync(Of T)(String, )
  fullName.vb: Butterfly.Db.BaseDatabase.SelectValuesAsync(Of T)(System.String, )
  name.vb: SelectValuesAsync(Of T)(String, )
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.SelectValuesAsync``1(System.String,System.Object)
    name: SelectValuesAsync<T>
    nameWithType: BaseDatabase.SelectValuesAsync<T>
    fullName: Butterfly.Db.BaseDatabase.SelectValuesAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.SelectValuesAsync``1(System.String,System.Object)
    name: SelectValuesAsync(Of T)
    nameWithType: BaseDatabase.SelectValuesAsync(Of T)
    fullName: Butterfly.Db.BaseDatabase.SelectValuesAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.SelectRowAsync(System.String,System.Object)
  commentId: M:Butterfly.Db.BaseDatabase.SelectRowAsync(System.String,System.Object)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: SelectRowAsync(String, Object)
  nameWithType: BaseDatabase.SelectRowAsync(String, Object)
  fullName: Butterfly.Db.BaseDatabase.SelectRowAsync(System.String, System.Object)
  nameWithType.vb: BaseDatabase.SelectRowAsync(String, )
  fullName.vb: Butterfly.Db.BaseDatabase.SelectRowAsync(System.String, )
  name.vb: SelectRowAsync(String, )
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.SelectRowAsync(System.String,System.Object)
    name: SelectRowAsync
    nameWithType: BaseDatabase.SelectRowAsync
    fullName: Butterfly.Db.BaseDatabase.SelectRowAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.SelectRowAsync(System.String,System.Object)
    name: SelectRowAsync
    nameWithType: BaseDatabase.SelectRowAsync
    fullName: Butterfly.Db.BaseDatabase.SelectRowAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.SelectRowsAsync(System.String,System.Object)
  commentId: M:Butterfly.Db.BaseDatabase.SelectRowsAsync(System.String,System.Object)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: SelectRowsAsync(String, Object)
  nameWithType: BaseDatabase.SelectRowsAsync(String, Object)
  fullName: Butterfly.Db.BaseDatabase.SelectRowsAsync(System.String, System.Object)
  nameWithType.vb: BaseDatabase.SelectRowsAsync(String, )
  fullName.vb: Butterfly.Db.BaseDatabase.SelectRowsAsync(System.String, )
  name.vb: SelectRowsAsync(String, )
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.SelectRowsAsync(System.String,System.Object)
    name: SelectRowsAsync
    nameWithType: BaseDatabase.SelectRowsAsync
    fullName: Butterfly.Db.BaseDatabase.SelectRowsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.SelectRowsAsync(System.String,System.Object)
    name: SelectRowsAsync
    nameWithType: BaseDatabase.SelectRowsAsync
    fullName: Butterfly.Db.BaseDatabase.SelectRowsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.SelectRowsAsync(Butterfly.Db.SelectStatement,System.Object)
  commentId: M:Butterfly.Db.BaseDatabase.SelectRowsAsync(Butterfly.Db.SelectStatement,System.Object)
  parent: Butterfly.Db.BaseDatabase
  name: SelectRowsAsync(SelectStatement, Object)
  nameWithType: BaseDatabase.SelectRowsAsync(SelectStatement, Object)
  fullName: Butterfly.Db.BaseDatabase.SelectRowsAsync(Butterfly.Db.SelectStatement, System.Object)
  nameWithType.vb: BaseDatabase.SelectRowsAsync(SelectStatement, )
  fullName.vb: Butterfly.Db.BaseDatabase.SelectRowsAsync(Butterfly.Db.SelectStatement, )
  name.vb: SelectRowsAsync(SelectStatement, )
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.SelectRowsAsync(Butterfly.Db.SelectStatement,System.Object)
    name: SelectRowsAsync
    nameWithType: BaseDatabase.SelectRowsAsync
    fullName: Butterfly.Db.BaseDatabase.SelectRowsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Butterfly.Db.SelectStatement
    name: SelectStatement
    nameWithType: SelectStatement
    fullName: Butterfly.Db.SelectStatement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.SelectRowsAsync(Butterfly.Db.SelectStatement,System.Object)
    name: SelectRowsAsync
    nameWithType: BaseDatabase.SelectRowsAsync
    fullName: Butterfly.Db.BaseDatabase.SelectRowsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Butterfly.Db.SelectStatement
    name: SelectStatement
    nameWithType: SelectStatement
    fullName: Butterfly.Db.SelectStatement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.QueryValueAsync``1(System.String,System.Object,{T})
  commentId: M:Butterfly.Db.BaseDatabase.QueryValueAsync``1(System.String,System.Object,``0)
  parent: Butterfly.Db.BaseDatabase
  definition: Butterfly.Db.BaseDatabase.QueryValueAsync``1(System.String,System.Object,``0)
  name: QueryValueAsync<T>(String, Object, T)
  nameWithType: BaseDatabase.QueryValueAsync<T>(String, Object, T)
  fullName: Butterfly.Db.BaseDatabase.QueryValueAsync<T>(System.String, System.Object, T)
  nameWithType.vb: BaseDatabase.QueryValueAsync(Of T)(String, , T)
  fullName.vb: Butterfly.Db.BaseDatabase.QueryValueAsync(Of T)(System.String, , T)
  name.vb: QueryValueAsync(Of T)(String, , T)
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.QueryValueAsync``1(System.String,System.Object,``0)
    name: QueryValueAsync<T>
    nameWithType: BaseDatabase.QueryValueAsync<T>
    fullName: Butterfly.Db.BaseDatabase.QueryValueAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.QueryValueAsync``1(System.String,System.Object,``0)
    name: QueryValueAsync(Of T)
    nameWithType: BaseDatabase.QueryValueAsync(Of T)
    fullName: Butterfly.Db.BaseDatabase.QueryValueAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.QueryRowAsync(System.String,System.Object)
  commentId: M:Butterfly.Db.BaseDatabase.QueryRowAsync(System.String,System.Object)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: QueryRowAsync(String, Object)
  nameWithType: BaseDatabase.QueryRowAsync(String, Object)
  fullName: Butterfly.Db.BaseDatabase.QueryRowAsync(System.String, System.Object)
  nameWithType.vb: BaseDatabase.QueryRowAsync(String, )
  fullName.vb: Butterfly.Db.BaseDatabase.QueryRowAsync(System.String, )
  name.vb: QueryRowAsync(String, )
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.QueryRowAsync(System.String,System.Object)
    name: QueryRowAsync
    nameWithType: BaseDatabase.QueryRowAsync
    fullName: Butterfly.Db.BaseDatabase.QueryRowAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.QueryRowAsync(System.String,System.Object)
    name: QueryRowAsync
    nameWithType: BaseDatabase.QueryRowAsync
    fullName: Butterfly.Db.BaseDatabase.QueryRowAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.QueryRowsAsync(System.String,System.Object)
  commentId: M:Butterfly.Db.BaseDatabase.QueryRowsAsync(System.String,System.Object)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: QueryRowsAsync(String, Object)
  nameWithType: BaseDatabase.QueryRowsAsync(String, Object)
  fullName: Butterfly.Db.BaseDatabase.QueryRowsAsync(System.String, System.Object)
  nameWithType.vb: BaseDatabase.QueryRowsAsync(String, )
  fullName.vb: Butterfly.Db.BaseDatabase.QueryRowsAsync(System.String, )
  name.vb: QueryRowsAsync(String, )
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.QueryRowsAsync(System.String,System.Object)
    name: QueryRowsAsync
    nameWithType: BaseDatabase.QueryRowsAsync
    fullName: Butterfly.Db.BaseDatabase.QueryRowsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.QueryRowsAsync(System.String,System.Object)
    name: QueryRowsAsync
    nameWithType: BaseDatabase.QueryRowsAsync
    fullName: Butterfly.Db.BaseDatabase.QueryRowsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.InsertAndCommitAsync``1(System.String,System.Object,System.Boolean)
  commentId: M:Butterfly.Db.BaseDatabase.InsertAndCommitAsync``1(System.String,System.Object,System.Boolean)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: InsertAndCommitAsync<T>(String, Object, Boolean)
  nameWithType: BaseDatabase.InsertAndCommitAsync<T>(String, Object, Boolean)
  fullName: Butterfly.Db.BaseDatabase.InsertAndCommitAsync<T>(System.String, System.Object, System.Boolean)
  nameWithType.vb: BaseDatabase.InsertAndCommitAsync(Of T)(String, , Boolean)
  fullName.vb: Butterfly.Db.BaseDatabase.InsertAndCommitAsync(Of T)(System.String, , System.Boolean)
  name.vb: InsertAndCommitAsync(Of T)(String, , Boolean)
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.InsertAndCommitAsync``1(System.String,System.Object,System.Boolean)
    name: InsertAndCommitAsync<T>
    nameWithType: BaseDatabase.InsertAndCommitAsync<T>
    fullName: Butterfly.Db.BaseDatabase.InsertAndCommitAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.InsertAndCommitAsync``1(System.String,System.Object,System.Boolean)
    name: InsertAndCommitAsync(Of T)
    nameWithType: BaseDatabase.InsertAndCommitAsync(Of T)
    fullName: Butterfly.Db.BaseDatabase.InsertAndCommitAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.UpdateAndCommitAsync(System.String,System.Object)
  commentId: M:Butterfly.Db.BaseDatabase.UpdateAndCommitAsync(System.String,System.Object)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: UpdateAndCommitAsync(String, Object)
  nameWithType: BaseDatabase.UpdateAndCommitAsync(String, Object)
  fullName: Butterfly.Db.BaseDatabase.UpdateAndCommitAsync(System.String, System.Object)
  nameWithType.vb: BaseDatabase.UpdateAndCommitAsync(String, )
  fullName.vb: Butterfly.Db.BaseDatabase.UpdateAndCommitAsync(System.String, )
  name.vb: UpdateAndCommitAsync(String, )
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.UpdateAndCommitAsync(System.String,System.Object)
    name: UpdateAndCommitAsync
    nameWithType: BaseDatabase.UpdateAndCommitAsync
    fullName: Butterfly.Db.BaseDatabase.UpdateAndCommitAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.UpdateAndCommitAsync(System.String,System.Object)
    name: UpdateAndCommitAsync
    nameWithType: BaseDatabase.UpdateAndCommitAsync
    fullName: Butterfly.Db.BaseDatabase.UpdateAndCommitAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.DeleteAndCommitAsync(System.String,System.Object)
  commentId: M:Butterfly.Db.BaseDatabase.DeleteAndCommitAsync(System.String,System.Object)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: DeleteAndCommitAsync(String, Object)
  nameWithType: BaseDatabase.DeleteAndCommitAsync(String, Object)
  fullName: Butterfly.Db.BaseDatabase.DeleteAndCommitAsync(System.String, System.Object)
  nameWithType.vb: BaseDatabase.DeleteAndCommitAsync(String, )
  fullName.vb: Butterfly.Db.BaseDatabase.DeleteAndCommitAsync(System.String, )
  name.vb: DeleteAndCommitAsync(String, )
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.DeleteAndCommitAsync(System.String,System.Object)
    name: DeleteAndCommitAsync
    nameWithType: BaseDatabase.DeleteAndCommitAsync
    fullName: Butterfly.Db.BaseDatabase.DeleteAndCommitAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.DeleteAndCommitAsync(System.String,System.Object)
    name: DeleteAndCommitAsync
    nameWithType: BaseDatabase.DeleteAndCommitAsync
    fullName: Butterfly.Db.BaseDatabase.DeleteAndCommitAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.BeginTransaction
  commentId: M:Butterfly.Db.BaseDatabase.BeginTransaction
  parent: Butterfly.Db.BaseDatabase
  name: BeginTransaction()
  nameWithType: BaseDatabase.BeginTransaction()
  fullName: Butterfly.Db.BaseDatabase.BeginTransaction()
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.BeginTransaction
    name: BeginTransaction
    nameWithType: BaseDatabase.BeginTransaction
    fullName: Butterfly.Db.BaseDatabase.BeginTransaction
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.BeginTransaction
    name: BeginTransaction
    nameWithType: BaseDatabase.BeginTransaction
    fullName: Butterfly.Db.BaseDatabase.BeginTransaction
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.BeginTransactionAsync
  commentId: M:Butterfly.Db.BaseDatabase.BeginTransactionAsync
  parent: Butterfly.Db.BaseDatabase
  name: BeginTransactionAsync()
  nameWithType: BaseDatabase.BeginTransactionAsync()
  fullName: Butterfly.Db.BaseDatabase.BeginTransactionAsync()
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.BeginTransactionAsync
    name: BeginTransactionAsync
    nameWithType: BaseDatabase.BeginTransactionAsync
    fullName: Butterfly.Db.BaseDatabase.BeginTransactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.BeginTransactionAsync
    name: BeginTransactionAsync
    nameWithType: BaseDatabase.BeginTransactionAsync
    fullName: Butterfly.Db.BaseDatabase.BeginTransactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.getDefaultValueByFieldName
  commentId: F:Butterfly.Db.BaseDatabase.getDefaultValueByFieldName
  parent: Butterfly.Db.BaseDatabase
  name: getDefaultValueByFieldName
  nameWithType: BaseDatabase.getDefaultValueByFieldName
  fullName: Butterfly.Db.BaseDatabase.getDefaultValueByFieldName
- uid: Butterfly.Db.BaseDatabase.SetDefaultValue(System.String,Func{System.String,System.Object},System.String)
  commentId: M:Butterfly.Db.BaseDatabase.SetDefaultValue(System.String,Func{System.String,System.Object},System.String)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: SetDefaultValue(String, Func<String, Object>, String)
  nameWithType: BaseDatabase.SetDefaultValue(String, Func<String, Object>, String)
  fullName: Butterfly.Db.BaseDatabase.SetDefaultValue(System.String, Func<System.String, System.Object>, System.String)
  nameWithType.vb: BaseDatabase.SetDefaultValue(String, Func(Of String, Object), String)
  fullName.vb: Butterfly.Db.BaseDatabase.SetDefaultValue(System.String, Func(Of System.String, System.Object), System.String)
  name.vb: SetDefaultValue(String, Func(Of String, Object), String)
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.SetDefaultValue(System.String,Func{System.String,System.Object},System.String)
    name: SetDefaultValue
    nameWithType: BaseDatabase.SetDefaultValue
    fullName: Butterfly.Db.BaseDatabase.SetDefaultValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.SetDefaultValue(System.String,Func{System.String,System.Object},System.String)
    name: SetDefaultValue
    nameWithType: BaseDatabase.SetDefaultValue
    fullName: Butterfly.Db.BaseDatabase.SetDefaultValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.getOverrideValueByFieldName
  commentId: F:Butterfly.Db.BaseDatabase.getOverrideValueByFieldName
  parent: Butterfly.Db.BaseDatabase
  name: getOverrideValueByFieldName
  nameWithType: BaseDatabase.getOverrideValueByFieldName
  fullName: Butterfly.Db.BaseDatabase.getOverrideValueByFieldName
- uid: Butterfly.Db.BaseDatabase.SetOverrideValue(System.String,Func{System.String,System.Object},System.String)
  commentId: M:Butterfly.Db.BaseDatabase.SetOverrideValue(System.String,Func{System.String,System.Object},System.String)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: SetOverrideValue(String, Func<String, Object>, String)
  nameWithType: BaseDatabase.SetOverrideValue(String, Func<String, Object>, String)
  fullName: Butterfly.Db.BaseDatabase.SetOverrideValue(System.String, Func<System.String, System.Object>, System.String)
  nameWithType.vb: BaseDatabase.SetOverrideValue(String, Func(Of String, Object), String)
  fullName.vb: Butterfly.Db.BaseDatabase.SetOverrideValue(System.String, Func(Of System.String, System.Object), System.String)
  name.vb: SetOverrideValue(String, Func(Of String, Object), String)
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.SetOverrideValue(System.String,Func{System.String,System.Object},System.String)
    name: SetOverrideValue
    nameWithType: BaseDatabase.SetOverrideValue
    fullName: Butterfly.Db.BaseDatabase.SetOverrideValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.SetOverrideValue(System.String,Func{System.String,System.Object},System.String)
    name: SetOverrideValue
    nameWithType: BaseDatabase.SetOverrideValue
    fullName: Butterfly.Db.BaseDatabase.SetOverrideValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.inputPreprocessors
  commentId: F:Butterfly.Db.BaseDatabase.inputPreprocessors
  parent: Butterfly.Db.BaseDatabase
  name: inputPreprocessors
  nameWithType: BaseDatabase.inputPreprocessors
  fullName: Butterfly.Db.BaseDatabase.inputPreprocessors
- uid: Butterfly.Db.BaseDatabase.AddInputPreprocessor(Action{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}})
  commentId: M:Butterfly.Db.BaseDatabase.AddInputPreprocessor(Action{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}})
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: AddInputPreprocessor(Action<String, System.Collections.Generic.Dictionary<String, Object>>)
  nameWithType: BaseDatabase.AddInputPreprocessor(Action<String, System.Collections.Generic.Dictionary<String, Object>>)
  fullName: Butterfly.Db.BaseDatabase.AddInputPreprocessor(Action<System.String, System.Collections.Generic.Dictionary<System.String, System.Object>>)
  nameWithType.vb: BaseDatabase.AddInputPreprocessor(Action(Of String, System.Collections.Generic.Dictionary(Of String, Object)))
  fullName.vb: Butterfly.Db.BaseDatabase.AddInputPreprocessor(Action(Of System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object)))
  name.vb: AddInputPreprocessor(Action(Of String, System.Collections.Generic.Dictionary(Of String, Object)))
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.AddInputPreprocessor(Action{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}})
    name: AddInputPreprocessor
    nameWithType: BaseDatabase.AddInputPreprocessor
    fullName: Butterfly.Db.BaseDatabase.AddInputPreprocessor
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.AddInputPreprocessor(Action{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}})
    name: AddInputPreprocessor
    nameWithType: BaseDatabase.AddInputPreprocessor
    fullName: Butterfly.Db.BaseDatabase.AddInputPreprocessor
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`2
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor``1(Func{{T},System.Object})
  commentId: M:Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor``1(Func{``0,System.Object})
  parent: Butterfly.Db.BaseDatabase
  definition: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor``1(Func{``0,System.Object})
  name: RemapTypeInputPreprocessor<T>(Func<T, Object>)
  nameWithType: BaseDatabase.RemapTypeInputPreprocessor<T>(Func<T, Object>)
  fullName: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor<T>(Func<T, System.Object>)
  nameWithType.vb: BaseDatabase.RemapTypeInputPreprocessor(Of T)(Func(Of T, Object))
  fullName.vb: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor(Of T)(Func(Of T, System.Object))
  name.vb: RemapTypeInputPreprocessor(Of T)(Func(Of T, Object))
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor``1(Func{``0,System.Object})
    name: RemapTypeInputPreprocessor<T>
    nameWithType: BaseDatabase.RemapTypeInputPreprocessor<T>
    fullName: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor``1(Func{``0,System.Object})
    name: RemapTypeInputPreprocessor(Of T)
    nameWithType: BaseDatabase.RemapTypeInputPreprocessor(Of T)
    fullName: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.CopyFieldValueInputPreprocessor(System.String,System.String)
  commentId: M:Butterfly.Db.BaseDatabase.CopyFieldValueInputPreprocessor(System.String,System.String)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: CopyFieldValueInputPreprocessor(String, String)
  nameWithType: BaseDatabase.CopyFieldValueInputPreprocessor(String, String)
  fullName: Butterfly.Db.BaseDatabase.CopyFieldValueInputPreprocessor(System.String, System.String)
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.CopyFieldValueInputPreprocessor(System.String,System.String)
    name: CopyFieldValueInputPreprocessor
    nameWithType: BaseDatabase.CopyFieldValueInputPreprocessor
    fullName: Butterfly.Db.BaseDatabase.CopyFieldValueInputPreprocessor
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.CopyFieldValueInputPreprocessor(System.String,System.String)
    name: CopyFieldValueInputPreprocessor
    nameWithType: BaseDatabase.CopyFieldValueInputPreprocessor
    fullName: Butterfly.Db.BaseDatabase.CopyFieldValueInputPreprocessor
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Action{Butterfly.Db.Event.DataEventTransaction})
  commentId: M:Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Action{Butterfly.Db.Event.DataEventTransaction})
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: CreateDynamicViewSet(Action<DataEventTransaction>)
  nameWithType: BaseDatabase.CreateDynamicViewSet(Action<DataEventTransaction>)
  fullName: Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Action<Butterfly.Db.Event.DataEventTransaction>)
  nameWithType.vb: BaseDatabase.CreateDynamicViewSet(Action(Of DataEventTransaction))
  fullName.vb: Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Action(Of Butterfly.Db.Event.DataEventTransaction))
  name.vb: CreateDynamicViewSet(Action(Of DataEventTransaction))
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Action{Butterfly.Db.Event.DataEventTransaction})
    name: CreateDynamicViewSet
    nameWithType: BaseDatabase.CreateDynamicViewSet
    fullName: Butterfly.Db.BaseDatabase.CreateDynamicViewSet
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Action{Butterfly.Db.Event.DataEventTransaction})
    name: CreateDynamicViewSet
    nameWithType: BaseDatabase.CreateDynamicViewSet
    fullName: Butterfly.Db.BaseDatabase.CreateDynamicViewSet
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Func{Butterfly.Db.Event.DataEventTransaction,Task})
  commentId: M:Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Func{Butterfly.Db.Event.DataEventTransaction,Task})
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: CreateDynamicViewSet(Func<DataEventTransaction, Task>)
  nameWithType: BaseDatabase.CreateDynamicViewSet(Func<DataEventTransaction, Task>)
  fullName: Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Func<Butterfly.Db.Event.DataEventTransaction, Task>)
  nameWithType.vb: BaseDatabase.CreateDynamicViewSet(Func(Of DataEventTransaction, Task))
  fullName.vb: Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Func(Of Butterfly.Db.Event.DataEventTransaction, Task))
  name.vb: CreateDynamicViewSet(Func(Of DataEventTransaction, Task))
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Func{Butterfly.Db.Event.DataEventTransaction,Task})
    name: CreateDynamicViewSet
    nameWithType: BaseDatabase.CreateDynamicViewSet
    fullName: Butterfly.Db.BaseDatabase.CreateDynamicViewSet
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.CreateDynamicViewSet(Func{Butterfly.Db.Event.DataEventTransaction,Task})
    name: CreateDynamicViewSet
    nameWithType: BaseDatabase.CreateDynamicViewSet
    fullName: Butterfly.Db.BaseDatabase.CreateDynamicViewSet
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String,Action{Butterfly.Db.Event.DataEventTransaction},System.Object,System.String,System.String[])
  commentId: M:Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String,Action{Butterfly.Db.Event.DataEventTransaction},System.Object,System.String,System.String[])
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: CreateAndStartDynamicViewAsync(String, Action<DataEventTransaction>, Object, String, String[])
  nameWithType: BaseDatabase.CreateAndStartDynamicViewAsync(String, Action<DataEventTransaction>, Object, String, String[])
  fullName: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String, Action<Butterfly.Db.Event.DataEventTransaction>, System.Object, System.String, System.String[])
  nameWithType.vb: BaseDatabase.CreateAndStartDynamicViewAsync(String, Action(Of DataEventTransaction), , String, String())
  fullName.vb: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String, Action(Of Butterfly.Db.Event.DataEventTransaction), , System.String, System.String())
  name.vb: CreateAndStartDynamicViewAsync(String, Action(Of DataEventTransaction), , String, String())
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String,Action{Butterfly.Db.Event.DataEventTransaction},System.Object,System.String,System.String[])
    name: CreateAndStartDynamicViewAsync
    nameWithType: BaseDatabase.CreateAndStartDynamicViewAsync
    fullName: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String,Action{Butterfly.Db.Event.DataEventTransaction},System.Object,System.String,System.String[])
    name: CreateAndStartDynamicViewAsync
    nameWithType: BaseDatabase.CreateAndStartDynamicViewAsync
    fullName: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String,Func{Butterfly.Db.Event.DataEventTransaction,Task},System.Object,System.String,System.String[])
  commentId: M:Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String,Func{Butterfly.Db.Event.DataEventTransaction,Task},System.Object,System.String,System.String[])
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: CreateAndStartDynamicViewAsync(String, Func<DataEventTransaction, Task>, Object, String, String[])
  nameWithType: BaseDatabase.CreateAndStartDynamicViewAsync(String, Func<DataEventTransaction, Task>, Object, String, String[])
  fullName: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String, Func<Butterfly.Db.Event.DataEventTransaction, Task>, System.Object, System.String, System.String[])
  nameWithType.vb: BaseDatabase.CreateAndStartDynamicViewAsync(String, Func(Of DataEventTransaction, Task), , String, String())
  fullName.vb: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String, Func(Of Butterfly.Db.Event.DataEventTransaction, Task), , System.String, System.String())
  name.vb: CreateAndStartDynamicViewAsync(String, Func(Of DataEventTransaction, Task), , String, String())
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String,Func{Butterfly.Db.Event.DataEventTransaction,Task},System.Object,System.String,System.String[])
    name: CreateAndStartDynamicViewAsync
    nameWithType: BaseDatabase.CreateAndStartDynamicViewAsync
    fullName: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync(System.String,Func{Butterfly.Db.Event.DataEventTransaction,Task},System.Object,System.String,System.String[])
    name: CreateAndStartDynamicViewAsync
    nameWithType: BaseDatabase.CreateAndStartDynamicViewAsync
    fullName: Butterfly.Db.BaseDatabase.CreateAndStartDynamicViewAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Event.DataEventTransaction
    name: DataEventTransaction
    nameWithType: DataEventTransaction
    fullName: Butterfly.Db.Event.DataEventTransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.foreignKeys
  commentId: F:Butterfly.Db.BaseDatabase.foreignKeys
  parent: Butterfly.Db.BaseDatabase
  name: foreignKeys
  nameWithType: BaseDatabase.foreignKeys
  fullName: Butterfly.Db.BaseDatabase.foreignKeys
- uid: Butterfly.Db.BaseDatabase.RegisterForeignKey(System.String,System.String,System.String,System.String,Butterfly.Db.ForeignKeyRule[])
  commentId: M:Butterfly.Db.BaseDatabase.RegisterForeignKey(System.String,System.String,System.String,System.String,Butterfly.Db.ForeignKeyRule[])
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: RegisterForeignKey(String, String, String, String, ForeignKeyRule[])
  nameWithType: BaseDatabase.RegisterForeignKey(String, String, String, String, ForeignKeyRule[])
  fullName: Butterfly.Db.BaseDatabase.RegisterForeignKey(System.String, System.String, System.String, System.String, Butterfly.Db.ForeignKeyRule[])
  nameWithType.vb: BaseDatabase.RegisterForeignKey(String, String, String, String, ForeignKeyRule())
  fullName.vb: Butterfly.Db.BaseDatabase.RegisterForeignKey(System.String, System.String, System.String, System.String, Butterfly.Db.ForeignKeyRule())
  name.vb: RegisterForeignKey(String, String, String, String, ForeignKeyRule())
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.RegisterForeignKey(System.String,System.String,System.String,System.String,Butterfly.Db.ForeignKeyRule[])
    name: RegisterForeignKey
    nameWithType: BaseDatabase.RegisterForeignKey
    fullName: Butterfly.Db.BaseDatabase.RegisterForeignKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Db.ForeignKeyRule
    name: ForeignKeyRule
    nameWithType: ForeignKeyRule
    fullName: Butterfly.Db.ForeignKeyRule
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.RegisterForeignKey(System.String,System.String,System.String,System.String,Butterfly.Db.ForeignKeyRule[])
    name: RegisterForeignKey
    nameWithType: BaseDatabase.RegisterForeignKey
    fullName: Butterfly.Db.BaseDatabase.RegisterForeignKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Butterfly.Db.ForeignKeyRule
    name: ForeignKeyRule
    nameWithType: ForeignKeyRule
    fullName: Butterfly.Db.ForeignKeyRule
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db
  commentId: N:Butterfly.Db
  name: Butterfly.Db
  nameWithType: Butterfly.Db
  fullName: Butterfly.Db
- uid: Butterfly.Db.BaseDatabase.SelectValueAsync``1(System.String,System.Object,``0)
  commentId: M:Butterfly.Db.BaseDatabase.SelectValueAsync``1(System.String,System.Object,``0)
  isExternal: true
  name: SelectValueAsync<T>(String, Object, T)
  nameWithType: BaseDatabase.SelectValueAsync<T>(String, Object, T)
  fullName: Butterfly.Db.BaseDatabase.SelectValueAsync<T>(System.String, System.Object, T)
  nameWithType.vb: BaseDatabase.SelectValueAsync(Of T)(String, , T)
  fullName.vb: Butterfly.Db.BaseDatabase.SelectValueAsync(Of T)(System.String, , T)
  name.vb: SelectValueAsync(Of T)(String, , T)
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.SelectValueAsync``1(System.String,System.Object,``0)
    name: SelectValueAsync<T>
    nameWithType: BaseDatabase.SelectValueAsync<T>
    fullName: Butterfly.Db.BaseDatabase.SelectValueAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.SelectValueAsync``1(System.String,System.Object,``0)
    name: SelectValueAsync(Of T)
    nameWithType: BaseDatabase.SelectValueAsync(Of T)
    fullName: Butterfly.Db.BaseDatabase.SelectValueAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.QueryValueAsync``1(System.String,System.Object,``0)
  commentId: M:Butterfly.Db.BaseDatabase.QueryValueAsync``1(System.String,System.Object,``0)
  isExternal: true
  name: QueryValueAsync<T>(String, Object, T)
  nameWithType: BaseDatabase.QueryValueAsync<T>(String, Object, T)
  fullName: Butterfly.Db.BaseDatabase.QueryValueAsync<T>(System.String, System.Object, T)
  nameWithType.vb: BaseDatabase.QueryValueAsync(Of T)(String, , T)
  fullName.vb: Butterfly.Db.BaseDatabase.QueryValueAsync(Of T)(System.String, , T)
  name.vb: QueryValueAsync(Of T)(String, , T)
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.QueryValueAsync``1(System.String,System.Object,``0)
    name: QueryValueAsync<T>
    nameWithType: BaseDatabase.QueryValueAsync<T>
    fullName: Butterfly.Db.BaseDatabase.QueryValueAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.QueryValueAsync``1(System.String,System.Object,``0)
    name: QueryValueAsync(Of T)
    nameWithType: BaseDatabase.QueryValueAsync(Of T)
    fullName: Butterfly.Db.BaseDatabase.QueryValueAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor``1(Func{``0,System.Object})
  commentId: M:Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor``1(Func{``0,System.Object})
  isExternal: true
  name: RemapTypeInputPreprocessor<T>(Func<T, Object>)
  nameWithType: BaseDatabase.RemapTypeInputPreprocessor<T>(Func<T, Object>)
  fullName: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor<T>(Func<T, System.Object>)
  nameWithType.vb: BaseDatabase.RemapTypeInputPreprocessor(Of T)(Func(Of T, Object))
  fullName.vb: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor(Of T)(Func(Of T, System.Object))
  name.vb: RemapTypeInputPreprocessor(Of T)(Func(Of T, Object))
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor``1(Func{``0,System.Object})
    name: RemapTypeInputPreprocessor<T>
    nameWithType: BaseDatabase.RemapTypeInputPreprocessor<T>
    fullName: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor``1(Func{``0,System.Object})
    name: RemapTypeInputPreprocessor(Of T)
    nameWithType: BaseDatabase.RemapTypeInputPreprocessor(Of T)
    fullName: Butterfly.Db.BaseDatabase.RemapTypeInputPreprocessor(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Memory.MemoryDatabase.#ctor*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.#ctor
  name: MemoryDatabase
  nameWithType: MemoryDatabase.MemoryDatabase
  fullName: Butterfly.Db.Memory.MemoryDatabase.MemoryDatabase
- uid: Butterfly.Db.Memory.MemoryDatabase.CreateFromSqlAsync(System.String)
  commentId: M:Butterfly.Db.Memory.MemoryDatabase.CreateFromSqlAsync(System.String)
  isExternal: true
- uid: Butterfly.Db.Memory.MemoryDatabase.CreateFromResourceFileAsync*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.CreateFromResourceFileAsync
  name: CreateFromResourceFileAsync
  nameWithType: MemoryDatabase.CreateFromResourceFileAsync
  fullName: Butterfly.Db.Memory.MemoryDatabase.CreateFromResourceFileAsync
- uid: Assembly
  commentId: '!:Assembly'
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: Assembly
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Butterfly.Db.Memory.MemoryDatabase.CreateFromSqlAsync*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.CreateFromSqlAsync
  name: CreateFromSqlAsync
  nameWithType: MemoryDatabase.CreateFromSqlAsync
  fullName: Butterfly.Db.Memory.MemoryDatabase.CreateFromSqlAsync
- uid: Butterfly.Db.Memory.MemoryDatabase.CreateStatement*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.CreateStatement
  name: CreateStatement
  nameWithType: MemoryDatabase.CreateStatement
  fullName: Butterfly.Db.Memory.MemoryDatabase.CreateStatement
- uid: Butterfly.Db.CreateStatement
  commentId: T:Butterfly.Db.CreateStatement
  parent: Butterfly.Db
  name: CreateStatement
  nameWithType: CreateStatement
  fullName: Butterfly.Db.CreateStatement
- uid: Butterfly.Db.BaseDatabase.LoadSchemaAsync
  commentId: M:Butterfly.Db.BaseDatabase.LoadSchemaAsync
  parent: Butterfly.Db.BaseDatabase
  name: LoadSchemaAsync()
  nameWithType: BaseDatabase.LoadSchemaAsync()
  fullName: Butterfly.Db.BaseDatabase.LoadSchemaAsync()
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.LoadSchemaAsync
    name: LoadSchemaAsync
    nameWithType: BaseDatabase.LoadSchemaAsync
    fullName: Butterfly.Db.BaseDatabase.LoadSchemaAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.LoadSchemaAsync
    name: LoadSchemaAsync
    nameWithType: BaseDatabase.LoadSchemaAsync
    fullName: Butterfly.Db.BaseDatabase.LoadSchemaAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Memory.MemoryDatabase.LoadSchemaAsync*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.LoadSchemaAsync
  name: LoadSchemaAsync
  nameWithType: MemoryDatabase.LoadSchemaAsync
  fullName: Butterfly.Db.Memory.MemoryDatabase.LoadSchemaAsync
- uid: Butterfly.Db.BaseDatabase.LoadTableSchemaAsync(System.String)
  commentId: M:Butterfly.Db.BaseDatabase.LoadTableSchemaAsync(System.String)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: LoadTableSchemaAsync(String)
  nameWithType: BaseDatabase.LoadTableSchemaAsync(String)
  fullName: Butterfly.Db.BaseDatabase.LoadTableSchemaAsync(System.String)
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.LoadTableSchemaAsync(System.String)
    name: LoadTableSchemaAsync
    nameWithType: BaseDatabase.LoadTableSchemaAsync
    fullName: Butterfly.Db.BaseDatabase.LoadTableSchemaAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.LoadTableSchemaAsync(System.String)
    name: LoadTableSchemaAsync
    nameWithType: BaseDatabase.LoadTableSchemaAsync
    fullName: Butterfly.Db.BaseDatabase.LoadTableSchemaAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Memory.MemoryDatabase.LoadTableSchemaAsync*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.LoadTableSchemaAsync
  name: LoadTableSchemaAsync
  nameWithType: MemoryDatabase.LoadTableSchemaAsync
  fullName: Butterfly.Db.Memory.MemoryDatabase.LoadTableSchemaAsync
- uid: Task{Butterfly.Db.Table}
  commentId: '!:Task{Butterfly.Db.Table}'
  definition: Task`1
  name: Task<Table>
  nameWithType: Task<Table>
  fullName: Task<Butterfly.Db.Table>
  nameWithType.vb: Task(Of Table)
  fullName.vb: Task(Of Butterfly.Db.Table)
  name.vb: Task(Of Table)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Butterfly.Db.Table
    name: Table
    nameWithType: Table
    fullName: Butterfly.Db.Table
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Butterfly.Db.Table
    name: Table
    nameWithType: Table
    fullName: Butterfly.Db.Table
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.CreateTransaction
  commentId: M:Butterfly.Db.BaseDatabase.CreateTransaction
  parent: Butterfly.Db.BaseDatabase
  name: CreateTransaction()
  nameWithType: BaseDatabase.CreateTransaction()
  fullName: Butterfly.Db.BaseDatabase.CreateTransaction()
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.CreateTransaction
    name: CreateTransaction
    nameWithType: BaseDatabase.CreateTransaction
    fullName: Butterfly.Db.BaseDatabase.CreateTransaction
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.CreateTransaction
    name: CreateTransaction
    nameWithType: BaseDatabase.CreateTransaction
    fullName: Butterfly.Db.BaseDatabase.CreateTransaction
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Memory.MemoryDatabase.CreateTransaction*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.CreateTransaction
  name: CreateTransaction
  nameWithType: MemoryDatabase.CreateTransaction
  fullName: Butterfly.Db.Memory.MemoryDatabase.CreateTransaction
- uid: Butterfly.Db.BaseTransaction
  commentId: T:Butterfly.Db.BaseTransaction
  parent: Butterfly.Db
  name: BaseTransaction
  nameWithType: BaseTransaction
  fullName: Butterfly.Db.BaseTransaction
- uid: Butterfly.Db.BaseDatabase.DoSelectRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)
  commentId: M:Butterfly.Db.BaseDatabase.DoSelectRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: DoSelectRowsAsync(String, System.Collections.Generic.Dictionary<String, Object>, Int32)
  nameWithType: BaseDatabase.DoSelectRowsAsync(String, System.Collections.Generic.Dictionary<String, Object>, Int32)
  fullName: Butterfly.Db.BaseDatabase.DoSelectRowsAsync(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, System.Int32)
  nameWithType.vb: BaseDatabase.DoSelectRowsAsync(String, System.Collections.Generic.Dictionary(Of String, Object), Int32)
  fullName.vb: Butterfly.Db.BaseDatabase.DoSelectRowsAsync(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), System.Int32)
  name.vb: DoSelectRowsAsync(String, System.Collections.Generic.Dictionary(Of String, Object), Int32)
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.DoSelectRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)
    name: DoSelectRowsAsync
    nameWithType: BaseDatabase.DoSelectRowsAsync
    fullName: Butterfly.Db.BaseDatabase.DoSelectRowsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.DoSelectRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)
    name: DoSelectRowsAsync
    nameWithType: BaseDatabase.DoSelectRowsAsync
    fullName: Butterfly.Db.BaseDatabase.DoSelectRowsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Memory.MemoryDatabase.DoSelectRowsAsync*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.DoSelectRowsAsync
  name: DoSelectRowsAsync
  nameWithType: MemoryDatabase.DoSelectRowsAsync
  fullName: Butterfly.Db.Memory.MemoryDatabase.DoSelectRowsAsync
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: '!:System.Collections.Generic.Dictionary{System.String,System.Object}'
  definition: System.Collections.Generic.Dictionary`2
  name: System.Collections.Generic.Dictionary<String, Object>
  nameWithType: System.Collections.Generic.Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: System.Collections.Generic.Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: System.Collections.Generic.Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Task{System.Collections.Generic.Dictionary{System.String,System.Object}[]}
  commentId: '!:Task{System.Collections.Generic.Dictionary{System.String,System.Object}[]}'
  definition: Task`1
  name: Task<System.Collections.Generic.Dictionary<String, Object>[]>
  nameWithType: Task<System.Collections.Generic.Dictionary<String, Object>[]>
  fullName: Task<System.Collections.Generic.Dictionary<System.String, System.Object>[]>
  nameWithType.vb: Task(Of System.Collections.Generic.Dictionary(Of String, Object)())
  fullName.vb: Task(Of System.Collections.Generic.Dictionary(Of System.String, System.Object)())
  name.vb: Task(Of System.Collections.Generic.Dictionary(Of String, Object)())
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  isExternal: true
  name: System.Collections.Generic.Dictionary<, >
  nameWithType: System.Collections.Generic.Dictionary<, >
  fullName: System.Collections.Generic.Dictionary<, >
  nameWithType.vb: System.Collections.Generic.Dictionary(Of , )
  fullName.vb: System.Collections.Generic.Dictionary(Of , )
  name.vb: System.Collections.Generic.Dictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.BaseDatabase.DoQueryRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  commentId: M:Butterfly.Db.BaseDatabase.DoQueryRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
  parent: Butterfly.Db.BaseDatabase
  isExternal: true
  name: DoQueryRowsAsync(String, System.Collections.Generic.Dictionary<String, Object>)
  nameWithType: BaseDatabase.DoQueryRowsAsync(String, System.Collections.Generic.Dictionary<String, Object>)
  fullName: Butterfly.Db.BaseDatabase.DoQueryRowsAsync(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>)
  nameWithType.vb: BaseDatabase.DoQueryRowsAsync(String, System.Collections.Generic.Dictionary(Of String, Object))
  fullName.vb: Butterfly.Db.BaseDatabase.DoQueryRowsAsync(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: DoQueryRowsAsync(String, System.Collections.Generic.Dictionary(Of String, Object))
  spec.csharp:
  - uid: Butterfly.Db.BaseDatabase.DoQueryRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
    name: DoQueryRowsAsync
    nameWithType: BaseDatabase.DoQueryRowsAsync
    fullName: Butterfly.Db.BaseDatabase.DoQueryRowsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.BaseDatabase.DoQueryRowsAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})
    name: DoQueryRowsAsync
    nameWithType: BaseDatabase.DoQueryRowsAsync
    fullName: Butterfly.Db.BaseDatabase.DoQueryRowsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: System.Collections.Generic.Dictionary
    nameWithType: System.Collections.Generic.Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Memory.MemoryDatabase.DoQueryRowsAsync*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.DoQueryRowsAsync
  name: DoQueryRowsAsync
  nameWithType: MemoryDatabase.DoQueryRowsAsync
  fullName: Butterfly.Db.Memory.MemoryDatabase.DoQueryRowsAsync
- uid: Regex
  isExternal: true
  name: Regex
  nameWithType: Regex
  fullName: Regex
- uid: Butterfly.Db.BaseDatabase.CanJoin
  commentId: P:Butterfly.Db.BaseDatabase.CanJoin
  parent: Butterfly.Db.BaseDatabase
  name: CanJoin
  nameWithType: BaseDatabase.CanJoin
  fullName: Butterfly.Db.BaseDatabase.CanJoin
- uid: Butterfly.Db.Memory.MemoryDatabase.CanJoin*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.CanJoin
  name: CanJoin
  nameWithType: MemoryDatabase.CanJoin
  fullName: Butterfly.Db.Memory.MemoryDatabase.CanJoin
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Butterfly.Db.BaseDatabase.CanFieldAlias
  commentId: P:Butterfly.Db.BaseDatabase.CanFieldAlias
  parent: Butterfly.Db.BaseDatabase
  name: CanFieldAlias
  nameWithType: BaseDatabase.CanFieldAlias
  fullName: Butterfly.Db.BaseDatabase.CanFieldAlias
- uid: Butterfly.Db.Memory.MemoryDatabase.CanFieldAlias*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.CanFieldAlias
  name: CanFieldAlias
  nameWithType: MemoryDatabase.CanFieldAlias
  fullName: Butterfly.Db.Memory.MemoryDatabase.CanFieldAlias
- uid: Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClause*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClause
  name: EvaluateWhereClause
  nameWithType: MemoryDatabase.EvaluateWhereClause
  fullName: Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClause
- uid: Butterfly.Db.StatementFromRef[]
  isExternal: true
  name: StatementFromRef[]
  nameWithType: StatementFromRef[]
  fullName: Butterfly.Db.StatementFromRef[]
  nameWithType.vb: StatementFromRef()
  fullName.vb: Butterfly.Db.StatementFromRef()
  name.vb: StatementFromRef()
  spec.csharp:
  - uid: Butterfly.Db.StatementFromRef
    name: StatementFromRef
    nameWithType: StatementFromRef
    fullName: Butterfly.Db.StatementFromRef
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Butterfly.Db.StatementFromRef
    name: StatementFromRef
    nameWithType: StatementFromRef
    fullName: Butterfly.Db.StatementFromRef
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClauseReplace*
  commentId: Overload:Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClauseReplace
  name: EvaluateWhereClauseReplace
  nameWithType: MemoryDatabase.EvaluateWhereClauseReplace
  fullName: Butterfly.Db.Memory.MemoryDatabase.EvaluateWhereClauseReplace
- uid: Func{System.String,System.String}
  commentId: '!:Func{System.String,System.String}'
  definition: Func`2
  name: Func<String, String>
  nameWithType: Func<String, String>
  fullName: Func<System.String, System.String>
  nameWithType.vb: Func(Of String, String)
  fullName.vb: Func(Of System.String, System.String)
  name.vb: Func(Of String, String)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
