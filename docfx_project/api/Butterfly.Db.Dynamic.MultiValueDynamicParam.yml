### YamlMime:ManagedReference
items:
- uid: Butterfly.Db.Dynamic.MultiValueDynamicParam
  commentId: T:Butterfly.Db.Dynamic.MultiValueDynamicParam
  id: MultiValueDynamicParam
  parent: Butterfly.Db.Dynamic
  children:
  - Butterfly.Db.Dynamic.MultiValueDynamicParam.#ctor(System.String)
  - Butterfly.Db.Dynamic.MultiValueDynamicParam.Clear
  - Butterfly.Db.Dynamic.MultiValueDynamicParam.GetValue
  - Butterfly.Db.Dynamic.MultiValueDynamicParam.SetValues(ICollection{System.Object})
  - Butterfly.Db.Dynamic.MultiValueDynamicParam.values
  langs:
  - csharp
  - vb
  name: MultiValueDynamicParam
  nameWithType: MultiValueDynamicParam
  fullName: Butterfly.Db.Dynamic.MultiValueDynamicParam
  type: Class
  source:
    remote:
      path: Butterfly.Db/Dynamic/MultiValueDynamicParam.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: MultiValueDynamicParam
    path: ../Butterfly.Db/Dynamic/MultiValueDynamicParam.cs
    startLine: 11
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  summary: "\nA <xref href=\"Butterfly.Db.IDynamicParam\" data-throw-if-not-resolved=\"false\"></xref> that may contain multiple values (like an array)\n"
  example: []
  syntax:
    content: 'public class MultiValueDynamicParam : BaseDynamicParam, IDynamicParam'
    content.vb: >-
      Public Class MultiValueDynamicParam
          Inherits BaseDynamicParam
          Implements IDynamicParam
  inheritance:
  - System.Object
  - Butterfly.Db.Dynamic.BaseDynamicParam
  implements:
  - Butterfly.Db.IDynamicParam
  inheritedMembers:
  - Butterfly.Db.Dynamic.BaseDynamicParam.logger
  - Butterfly.Db.Dynamic.BaseDynamicParam.name
  - Butterfly.Db.Dynamic.BaseDynamicParam.Dirty
  - Butterfly.Db.Dynamic.BaseDynamicParam.SetDirty
  - Butterfly.Db.Dynamic.BaseDynamicParam.ResetDirty
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Butterfly.Db.Dynamic.MultiValueDynamicParam.values
  commentId: F:Butterfly.Db.Dynamic.MultiValueDynamicParam.values
  id: values
  parent: Butterfly.Db.Dynamic.MultiValueDynamicParam
  langs:
  - csharp
  - vb
  name: values
  nameWithType: MultiValueDynamicParam.values
  fullName: Butterfly.Db.Dynamic.MultiValueDynamicParam.values
  type: Field
  source:
    remote:
      path: Butterfly.Db/Dynamic/MultiValueDynamicParam.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: values
    path: ../Butterfly.Db/Dynamic/MultiValueDynamicParam.cs
    startLine: 12
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: protected readonly List<object> values
    return:
      type: List{System.Object}
    content.vb: Protected ReadOnly values As List(Of Object)
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Butterfly.Db.Dynamic.MultiValueDynamicParam.#ctor(System.String)
  commentId: M:Butterfly.Db.Dynamic.MultiValueDynamicParam.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Butterfly.Db.Dynamic.MultiValueDynamicParam
  langs:
  - csharp
  - vb
  name: MultiValueDynamicParam(String)
  nameWithType: MultiValueDynamicParam.MultiValueDynamicParam(String)
  fullName: Butterfly.Db.Dynamic.MultiValueDynamicParam.MultiValueDynamicParam(System.String)
  type: Constructor
  source:
    remote:
      path: Butterfly.Db/Dynamic/MultiValueDynamicParam.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: .ctor
    path: ../Butterfly.Db/Dynamic/MultiValueDynamicParam.cs
    startLine: 14
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: public MultiValueDynamicParam(string name)
    parameters:
    - id: name
      type: System.String
    content.vb: Public Sub New(name As String)
  overload: Butterfly.Db.Dynamic.MultiValueDynamicParam.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Butterfly.Db.Dynamic.MultiValueDynamicParam.Clear
  commentId: M:Butterfly.Db.Dynamic.MultiValueDynamicParam.Clear
  id: Clear
  parent: Butterfly.Db.Dynamic.MultiValueDynamicParam
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: MultiValueDynamicParam.Clear()
  fullName: Butterfly.Db.Dynamic.MultiValueDynamicParam.Clear()
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/MultiValueDynamicParam.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: Clear
    path: ../Butterfly.Db/Dynamic/MultiValueDynamicParam.cs
    startLine: 17
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: public override void Clear()
    content.vb: Public Overrides Sub Clear
  overridden: Butterfly.Db.Dynamic.BaseDynamicParam.Clear
  overload: Butterfly.Db.Dynamic.MultiValueDynamicParam.Clear*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Butterfly.Db.Dynamic.MultiValueDynamicParam.GetValue
  commentId: M:Butterfly.Db.Dynamic.MultiValueDynamicParam.GetValue
  id: GetValue
  parent: Butterfly.Db.Dynamic.MultiValueDynamicParam
  langs:
  - csharp
  - vb
  name: GetValue()
  nameWithType: MultiValueDynamicParam.GetValue()
  fullName: Butterfly.Db.Dynamic.MultiValueDynamicParam.GetValue()
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/MultiValueDynamicParam.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: GetValue
    path: ../Butterfly.Db/Dynamic/MultiValueDynamicParam.cs
    startLine: 25
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: public override object GetValue()
    return:
      type: System.Object
    content.vb: Public Overrides Function GetValue As Object
  overridden: Butterfly.Db.Dynamic.BaseDynamicParam.GetValue
  overload: Butterfly.Db.Dynamic.MultiValueDynamicParam.GetValue*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Butterfly.Db.Dynamic.MultiValueDynamicParam.SetValues(ICollection{System.Object})
  commentId: M:Butterfly.Db.Dynamic.MultiValueDynamicParam.SetValues(ICollection{System.Object})
  id: SetValues(ICollection{System.Object})
  parent: Butterfly.Db.Dynamic.MultiValueDynamicParam
  langs:
  - csharp
  - vb
  name: SetValues(ICollection<Object>)
  nameWithType: MultiValueDynamicParam.SetValues(ICollection<Object>)
  fullName: Butterfly.Db.Dynamic.MultiValueDynamicParam.SetValues(ICollection<System.Object>)
  type: Method
  source:
    remote:
      path: Butterfly.Db/Dynamic/MultiValueDynamicParam.cs
      branch: master
      repo: https://github.com/firesharkstudios/butterfly-db.git
    id: SetValues
    path: ../Butterfly.Db/Dynamic/MultiValueDynamicParam.cs
    startLine: 29
  assemblies:
  - Butterfly.Db
  namespace: Butterfly.Db.Dynamic
  syntax:
    content: public void SetValues(ICollection<object> value)
    parameters:
    - id: value
      type: ICollection{System.Object}
    content.vb: Public Sub SetValues(value As ICollection(Of Object))
  overload: Butterfly.Db.Dynamic.MultiValueDynamicParam.SetValues*
  nameWithType.vb: MultiValueDynamicParam.SetValues(ICollection(Of Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Butterfly.Db.Dynamic.MultiValueDynamicParam.SetValues(ICollection(Of System.Object))
  name.vb: SetValues(ICollection(Of Object))
references:
- uid: Butterfly.Db.IDynamicParam
  commentId: T:Butterfly.Db.IDynamicParam
  parent: Butterfly.Db
  name: IDynamicParam
  nameWithType: IDynamicParam
  fullName: Butterfly.Db.IDynamicParam
- uid: Butterfly.Db.Dynamic
  commentId: N:Butterfly.Db.Dynamic
  name: Butterfly.Db.Dynamic
  nameWithType: Butterfly.Db.Dynamic
  fullName: Butterfly.Db.Dynamic
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Butterfly.Db.Dynamic.BaseDynamicParam
  commentId: T:Butterfly.Db.Dynamic.BaseDynamicParam
  parent: Butterfly.Db.Dynamic
  name: BaseDynamicParam
  nameWithType: BaseDynamicParam
  fullName: Butterfly.Db.Dynamic.BaseDynamicParam
- uid: Butterfly.Db.Dynamic.BaseDynamicParam.logger
  commentId: F:Butterfly.Db.Dynamic.BaseDynamicParam.logger
  parent: Butterfly.Db.Dynamic.BaseDynamicParam
  name: logger
  nameWithType: BaseDynamicParam.logger
  fullName: Butterfly.Db.Dynamic.BaseDynamicParam.logger
- uid: Butterfly.Db.Dynamic.BaseDynamicParam.name
  commentId: F:Butterfly.Db.Dynamic.BaseDynamicParam.name
  parent: Butterfly.Db.Dynamic.BaseDynamicParam
  name: name
  nameWithType: BaseDynamicParam.name
  fullName: Butterfly.Db.Dynamic.BaseDynamicParam.name
- uid: Butterfly.Db.Dynamic.BaseDynamicParam.Dirty
  commentId: P:Butterfly.Db.Dynamic.BaseDynamicParam.Dirty
  parent: Butterfly.Db.Dynamic.BaseDynamicParam
  name: Dirty
  nameWithType: BaseDynamicParam.Dirty
  fullName: Butterfly.Db.Dynamic.BaseDynamicParam.Dirty
- uid: Butterfly.Db.Dynamic.BaseDynamicParam.SetDirty
  commentId: M:Butterfly.Db.Dynamic.BaseDynamicParam.SetDirty
  parent: Butterfly.Db.Dynamic.BaseDynamicParam
  name: SetDirty()
  nameWithType: BaseDynamicParam.SetDirty()
  fullName: Butterfly.Db.Dynamic.BaseDynamicParam.SetDirty()
  spec.csharp:
  - uid: Butterfly.Db.Dynamic.BaseDynamicParam.SetDirty
    name: SetDirty
    nameWithType: BaseDynamicParam.SetDirty
    fullName: Butterfly.Db.Dynamic.BaseDynamicParam.SetDirty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.Dynamic.BaseDynamicParam.SetDirty
    name: SetDirty
    nameWithType: BaseDynamicParam.SetDirty
    fullName: Butterfly.Db.Dynamic.BaseDynamicParam.SetDirty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Dynamic.BaseDynamicParam.ResetDirty
  commentId: M:Butterfly.Db.Dynamic.BaseDynamicParam.ResetDirty
  parent: Butterfly.Db.Dynamic.BaseDynamicParam
  name: ResetDirty()
  nameWithType: BaseDynamicParam.ResetDirty()
  fullName: Butterfly.Db.Dynamic.BaseDynamicParam.ResetDirty()
  spec.csharp:
  - uid: Butterfly.Db.Dynamic.BaseDynamicParam.ResetDirty
    name: ResetDirty
    nameWithType: BaseDynamicParam.ResetDirty
    fullName: Butterfly.Db.Dynamic.BaseDynamicParam.ResetDirty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.Dynamic.BaseDynamicParam.ResetDirty
    name: ResetDirty
    nameWithType: BaseDynamicParam.ResetDirty
    fullName: Butterfly.Db.Dynamic.BaseDynamicParam.ResetDirty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db
  commentId: N:Butterfly.Db
  name: Butterfly.Db
  nameWithType: Butterfly.Db
  fullName: Butterfly.Db
- uid: List{System.Object}
  commentId: '!:List{System.Object}'
  definition: List`1
  name: List<Object>
  nameWithType: List<Object>
  fullName: List<System.Object>
  nameWithType.vb: List(Of Object)
  fullName.vb: List(Of System.Object)
  name.vb: List(Of Object)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Dynamic.MultiValueDynamicParam.#ctor*
  commentId: Overload:Butterfly.Db.Dynamic.MultiValueDynamicParam.#ctor
  name: MultiValueDynamicParam
  nameWithType: MultiValueDynamicParam.MultiValueDynamicParam
  fullName: Butterfly.Db.Dynamic.MultiValueDynamicParam.MultiValueDynamicParam
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Butterfly.Db.Dynamic.BaseDynamicParam.Clear
  commentId: M:Butterfly.Db.Dynamic.BaseDynamicParam.Clear
  parent: Butterfly.Db.Dynamic.BaseDynamicParam
  name: Clear()
  nameWithType: BaseDynamicParam.Clear()
  fullName: Butterfly.Db.Dynamic.BaseDynamicParam.Clear()
  spec.csharp:
  - uid: Butterfly.Db.Dynamic.BaseDynamicParam.Clear
    name: Clear
    nameWithType: BaseDynamicParam.Clear
    fullName: Butterfly.Db.Dynamic.BaseDynamicParam.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.Dynamic.BaseDynamicParam.Clear
    name: Clear
    nameWithType: BaseDynamicParam.Clear
    fullName: Butterfly.Db.Dynamic.BaseDynamicParam.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Dynamic.MultiValueDynamicParam.Clear*
  commentId: Overload:Butterfly.Db.Dynamic.MultiValueDynamicParam.Clear
  name: Clear
  nameWithType: MultiValueDynamicParam.Clear
  fullName: Butterfly.Db.Dynamic.MultiValueDynamicParam.Clear
- uid: Butterfly.Db.Dynamic.BaseDynamicParam.GetValue
  commentId: M:Butterfly.Db.Dynamic.BaseDynamicParam.GetValue
  parent: Butterfly.Db.Dynamic.BaseDynamicParam
  name: GetValue()
  nameWithType: BaseDynamicParam.GetValue()
  fullName: Butterfly.Db.Dynamic.BaseDynamicParam.GetValue()
  spec.csharp:
  - uid: Butterfly.Db.Dynamic.BaseDynamicParam.GetValue
    name: GetValue
    nameWithType: BaseDynamicParam.GetValue
    fullName: Butterfly.Db.Dynamic.BaseDynamicParam.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Butterfly.Db.Dynamic.BaseDynamicParam.GetValue
    name: GetValue
    nameWithType: BaseDynamicParam.GetValue
    fullName: Butterfly.Db.Dynamic.BaseDynamicParam.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Butterfly.Db.Dynamic.MultiValueDynamicParam.GetValue*
  commentId: Overload:Butterfly.Db.Dynamic.MultiValueDynamicParam.GetValue
  name: GetValue
  nameWithType: MultiValueDynamicParam.GetValue
  fullName: Butterfly.Db.Dynamic.MultiValueDynamicParam.GetValue
- uid: Butterfly.Db.Dynamic.MultiValueDynamicParam.SetValues*
  commentId: Overload:Butterfly.Db.Dynamic.MultiValueDynamicParam.SetValues
  name: SetValues
  nameWithType: MultiValueDynamicParam.SetValues
  fullName: Butterfly.Db.Dynamic.MultiValueDynamicParam.SetValues
- uid: ICollection{System.Object}
  commentId: '!:ICollection{System.Object}'
  definition: ICollection`1
  name: ICollection<Object>
  nameWithType: ICollection<Object>
  fullName: ICollection<System.Object>
  nameWithType.vb: ICollection(Of Object)
  fullName.vb: ICollection(Of System.Object)
  name.vb: ICollection(Of Object)
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ICollection`1
  commentId: '!:ICollection`1'
  isExternal: true
  name: ICollection<>
  nameWithType: ICollection<>
  fullName: ICollection<>
  nameWithType.vb: ICollection(Of )
  fullName.vb: ICollection(Of )
  name.vb: ICollection(Of )
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
